{"version":3,"file":"static/js/9484.79ea6b08.chunk.js","mappings":"yKACA,MAAMA,EAAc,EAAGC,EAAY,EAC5B,SAASC,EAAiBC,GAC7B,GAAsB,WAAjBA,EAAKC,SAAyC,UAAjBD,EAAKC,SACf,SAAnBD,EAAKE,WAA2C,UAAnBF,EAAKE,UACnC,OAEAF,EAAKG,OAAOC,MAAQN,GAAgC,SAAnBE,EAAKE,UACtCF,EAAKK,SAASC,SAASC,EAAIP,EAAKQ,KAAOR,EAAKS,OAAOF,EAE9CP,EAAKG,OAAOO,KAAOV,EAAKW,WAAWC,OAA4B,UAAnBZ,EAAKE,YACtDF,EAAKK,SAASC,SAASC,EAAIP,EAAKW,WAAWC,MAAQZ,EAAKQ,KAAOR,EAAKS,OAAOF,GAE/E,MAAMM,EAAWb,EAAKK,SAASQ,SAASN,EACxC,IAAIO,GAAU,EACd,GAAwB,UAAnBd,EAAKE,WACNF,EAAKG,OAAOC,OAASJ,EAAKW,WAAWC,OACrCC,EAAWhB,GACS,SAAnBG,EAAKE,WAAwBF,EAAKG,OAAOO,MAAQZ,GAAae,EAAWhB,EAAc,CACxF,MAAMkB,GAAcC,EAAAA,EAAAA,IAAchB,EAAKK,SAASY,QAAQC,OAAOC,WAAWC,OAC1EpB,EAAKK,SAASQ,SAASN,IAAMQ,EAC7BD,GAAU,CACd,CACA,IAAKA,EACD,OAEJ,MAAMO,EAASrB,EAAKS,OAAOF,EAAIP,EAAKQ,KAChCR,EAAKG,OAAOC,OAASJ,EAAKW,WAAWC,OAA4B,UAAnBZ,EAAKE,UACnDF,EAAKK,SAASC,SAASC,EAAIP,EAAKW,WAAWC,MAAQS,EAE9CrB,EAAKG,OAAOO,MAAQZ,GAAgC,SAAnBE,EAAKE,YAC3CF,EAAKK,SAASC,SAASC,EAAIc,GAEV,UAAjBrB,EAAKC,SACLD,EAAKK,SAASiB,SAEtB,CACO,SAASC,EAAevB,GAC3B,GAAsB,WAAjBA,EAAKC,SAAyC,UAAjBD,EAAKC,SACf,WAAnBD,EAAKE,WAA6C,QAAnBF,EAAKE,UACrC,OAEAF,EAAKG,OAAOqB,OAAS1B,GAAgC,QAAnBE,EAAKE,UACvCF,EAAKK,SAASC,SAASmB,EAAIzB,EAAKQ,KAAOR,EAAKS,OAAOgB,EAE9CzB,EAAKG,OAAOuB,IAAM1B,EAAKW,WAAWgB,QAA6B,WAAnB3B,EAAKE,YACtDF,EAAKK,SAASC,SAASmB,EAAIzB,EAAKW,WAAWgB,OAAS3B,EAAKQ,KAAOR,EAAKS,OAAOgB,GAEhF,MAAMZ,EAAWb,EAAKK,SAASQ,SAASY,EACxC,IAAIX,GAAU,EACd,GAAwB,WAAnBd,EAAKE,WACNF,EAAKG,OAAOqB,QAAUxB,EAAKW,WAAWgB,QACtCd,EAAWhB,GACS,QAAnBG,EAAKE,WAAuBF,EAAKG,OAAOuB,KAAO5B,GAAae,EAAWhB,EAAc,CACtF,MAAMkB,GAAcC,EAAAA,EAAAA,IAAchB,EAAKK,SAASY,QAAQC,OAAOU,SAASR,OACxEpB,EAAKK,SAASQ,SAASY,IAAMV,EAC7BD,GAAU,CACd,CACA,IAAKA,EACD,OAEJ,MAAMO,EAASrB,EAAKS,OAAOgB,EAAIzB,EAAKQ,KAChCR,EAAKG,OAAOqB,QAAUxB,EAAKW,WAAWgB,QAA6B,WAAnB3B,EAAKE,UACrDF,EAAKK,SAASC,SAASmB,EAAIzB,EAAKW,WAAWgB,OAASN,EAE/CrB,EAAKG,OAAOuB,KAAO5B,GAAgC,QAAnBE,EAAKE,YAC1CF,EAAKK,SAASC,SAASmB,EAAIJ,GAEV,UAAjBrB,EAAKC,SACLD,EAAKK,SAASiB,SAEtB,C","sources":["../node_modules/@tsparticles/updater-out-modes/browser/Utils.js"],"sourcesContent":["import { getRangeValue } from \"@tsparticles/engine\";\nconst minVelocity = 0, boundsMin = 0;\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== \"bounce\" && data.outMode !== \"split\") ||\n        (data.direction !== \"left\" && data.direction !== \"right\")) {\n        return;\n    }\n    if (data.bounds.right < boundsMin && data.direction === \"left\") {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === \"right\" &&\n        data.bounds.right >= data.canvasSize.width &&\n        velocity > minVelocity) ||\n        (data.direction === \"left\" && data.bounds.left <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= boundsMin && data.direction === \"left\") {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== \"bounce\" && data.outMode !== \"split\") ||\n        (data.direction !== \"bottom\" && data.direction !== \"top\")) {\n        return;\n    }\n    if (data.bounds.bottom < boundsMin && data.direction === \"top\") {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === \"bottom\" &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > minVelocity) ||\n        (data.direction === \"top\" && data.bounds.top <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= boundsMin && data.direction === \"top\") {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\n"],"names":["minVelocity","boundsMin","bounceHorizontal","data","outMode","direction","bounds","right","particle","position","x","size","offset","left","canvasSize","width","velocity","bounced","newVelocity","getRangeValue","options","bounce","horizontal","value","minPos","destroy","bounceVertical","bottom","y","top","height","vertical"],"sourceRoot":""}