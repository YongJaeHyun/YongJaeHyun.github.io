{"version":3,"file":"static/js/7520.34a20047.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/utils.js","../node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/EmittersPolygonShape.js","../node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/Options/Classes/EmittersPolygonShapeOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-polygon/browser/EmittersPolygonShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { getRandom } from \"@tsparticles/engine\";\nconst double = 2, doublePI = Math.PI * double, defaultRotation = 0, maxAttempts = 100;\nexport function generateRandomPolygon(position, sides, radius, rotationAngle = defaultRotation) {\n    const polygon = [], angle = doublePI / sides;\n    for (let i = 0; i < sides; i++) {\n        const currentAngle = angle * i + rotationAngle;\n        polygon.push({\n            x: position.x + radius * Math.cos(currentAngle),\n            y: position.y + radius * Math.sin(currentAngle),\n        });\n    }\n    return polygon;\n}\nexport function generateRandomPointWithinPolygon(polygon) {\n    const firstIndex = 0, firstPoint = polygon[firstIndex], min = { ...firstPoint }, max = { ...firstPoint };\n    for (const point of polygon) {\n        if (point.x < min.x) {\n            min.x = point.x;\n        }\n        if (point.x > max.x) {\n            max.x = point.x;\n        }\n        if (point.y < min.y) {\n            min.y = point.y;\n        }\n        if (point.y > max.y) {\n            max.y = point.y;\n        }\n    }\n    let randomPoint = null;\n    for (let attempts = 0; attempts < maxAttempts; attempts++) {\n        const tmpPoint = {\n            x: min.x + getRandom() * (max.x - min.x),\n            y: min.y + getRandom() * (max.y - min.y),\n        };\n        if (isPointInPolygon(tmpPoint, polygon)) {\n            randomPoint = tmpPoint;\n            break;\n        }\n    }\n    return randomPoint;\n}\nexport function generateRandomPointOnPolygonPerimeter(polygon) {\n    const sideIndex = Math.floor(getRandom() * polygon.length), startPoint = polygon[sideIndex], offset = 1, endPoint = polygon[(sideIndex + offset) % polygon.length], t = getRandom();\n    return { x: startPoint.x + (endPoint.x - startPoint.x) * t, y: startPoint.y + (endPoint.y - startPoint.y) * t };\n}\nexport function isPointInPolygon(point, polygon) {\n    let inside = false;\n    const offset = 1;\n    for (let i = 0, j = polygon.length - offset; i < polygon.length; j = i++) {\n        const pi = polygon[i], pj = polygon[j];\n        const intersect = pi.y > point.y !== pj.y > point.y && point.x < ((pj.x - pi.x) * (point.y - pi.y)) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\n","import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { degToRad } from \"@tsparticles/engine\";\nimport { generateRandomPointOnPolygonPerimeter, generateRandomPointWithinPolygon, generateRandomPolygon, } from \"./utils.js\";\nconst half = 0.5;\nexport class EmittersPolygonShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n        this.sides = options.sides;\n        this.angle = degToRad(options.angle);\n        this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        const fill = this.fill, polygon = this.polygon, res = fill ? generateRandomPointWithinPolygon(polygon) : generateRandomPointOnPolygonPerimeter(polygon);\n        return Promise.resolve(res ? { position: res } : null);\n    }\n    resize(position, size) {\n        super.resize(position, size);\n        this.polygon = generateRandomPolygon(position, this.sides, size.width * half, this.angle);\n    }\n}\n","export class EmittersPolygonShapeOptions {\n    constructor() {\n        this.angle = 0;\n        this.sides = 5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = data.angle;\n        }\n        if (data.sides !== undefined) {\n            this.sides = data.sides;\n        }\n    }\n}\n","import { EmittersPolygonShape } from \"./EmittersPolygonShape.js\";\nimport { EmittersPolygonShapeOptions } from \"./Options/Classes/EmittersPolygonShapeOptions.js\";\nexport class EmittersPolygonShapeGenerator {\n    generate(position, size, fill, options) {\n        const shapeOptions = new EmittersPolygonShapeOptions();\n        shapeOptions.load(options);\n        return new EmittersPolygonShape(position, size, fill, shapeOptions);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["doublePI","Math","PI","generateRandomPolygon","position","sides","radius","rotationAngle","arguments","length","undefined","polygon","angle","i","currentAngle","push","x","cos","y","sin","isPointInPolygon","point","inside","j","pi","pj","EmittersPolygonShape","EmitterShapeBase","constructor","size","fill","options","super","this","degToRad","width","init","randomPosition","res","firstPoint","min","max","randomPoint","attempts","tmpPoint","getRandom","generateRandomPointWithinPolygon","sideIndex","floor","startPoint","endPoint","t","generateRandomPointOnPolygonPerimeter","Promise","resolve","resize","EmittersPolygonShapeOptions","load","data","EmittersPolygonShapeGenerator","generate","shapeOptions"],"sourceRoot":""}