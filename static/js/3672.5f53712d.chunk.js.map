{"version":3,"file":"static/js/3672.5f53712d.chunk.js","mappings":"mJACO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,MAAQ,IAAIC,EAAAA,GACjBF,KAAKC,MAAME,MAAQ,UACnBH,KAAKI,OAAS,EACdJ,KAAKK,KAAO,CAChB,CACAC,IAAAA,CAAKC,QACYC,IAATD,SAGeC,IAAfD,EAAKN,QACLD,KAAKC,MAAQC,EAAAA,GAAaO,OAAOT,KAAKC,MAAOM,EAAKN,QAEtDD,KAAKU,SAAWH,EAAKG,SACrBV,KAAKW,cAAgBJ,EAAKI,mBACNH,IAAhBD,EAAKH,SACLJ,KAAKI,OAASG,EAAKH,aAELI,IAAdD,EAAKF,OACLL,KAAKK,KAAOE,EAAKF,MAEzB,ECtBG,MAAMO,EACTb,WAAAA,GACIC,KAAKa,MAAO,EACZb,KAAKc,MAAQ,EACbd,KAAKe,QAAS,EACdf,KAAKgB,WAAa,EAClBhB,KAAKiB,OAAS,EAClB,CACAX,IAAAA,CAAKC,QACYC,IAATD,SAGcC,IAAdD,EAAKM,OACLb,KAAKa,KAAON,EAAKM,WAEFL,IAAfD,EAAKO,QACLd,KAAKc,MAAQP,EAAKO,YAEFN,IAAhBD,EAAKQ,SACLf,KAAKe,OAASR,EAAKQ,aAECP,IAApBD,EAAKS,aACLhB,KAAKgB,WAAaT,EAAKS,iBAEPR,IAAhBD,EAAKU,SAGTjB,KAAKiB,OAASV,EAAKU,OAAOC,KAAKC,IAC3B,MAAMC,EAAI,IAAItB,EAEd,OADAsB,EAAEd,KAAKa,GACAC,CAAC,KAEhB,EChCG,MAAMC,EACTtB,WAAAA,GACIC,KAAKsB,GAAK,WACd,CACA,eAAMC,CAAUC,GACZ,MAAM,kBAAEC,SAA4B,+BACpC,OAAO,IAAIA,EAAkBD,EACjC,CACAE,WAAAA,CAAYC,EAASC,GAAQ,IAAAC,EACzB,IAAK7B,KAAK8B,YAAYH,KAAa3B,KAAK8B,YAAYF,GAChD,OAEJ,IAAIG,EAAmBJ,EAAQK,eACAxB,KAAX,QAAhBqB,EAAAE,SAAgB,IAAAF,OAAA,EAAhBA,EAAkBvB,QAClBqB,EAAQK,UAAYD,EAAmB,IAAInB,GAE/CmB,EAAiBzB,KAAW,OAANsB,QAAM,IAANA,OAAM,EAANA,EAAQI,UAClC,CACAF,WAAAA,CAAYH,GAAS,IAAAM,EAAAC,EACjB,OAAiC,QAAjCD,EAAc,OAAPN,QAAO,IAAPA,GAAkB,QAAXO,EAAPP,EAASK,iBAAS,IAAAE,OAAA,EAAlBA,EAAoBnB,cAAM,IAAAkB,GAAAA,CACrC,E","sources":["../node_modules/@tsparticles/plugin-infection/browser/Options/Classes/InfectionStage.js","../node_modules/@tsparticles/plugin-infection/browser/Options/Classes/Infection.js","../node_modules/@tsparticles/plugin-infection/browser/InfectionPlugin.js"],"sourcesContent":["import { OptionsColor } from \"@tsparticles/engine\";\nexport class InfectionStage {\n    constructor() {\n        this.color = new OptionsColor();\n        this.color.value = \"#ff0000\";\n        this.radius = 0;\n        this.rate = 1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        this.duration = data.duration;\n        this.infectedStage = data.infectedStage;\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n        if (data.rate !== undefined) {\n            this.rate = data.rate;\n        }\n    }\n}\n","import { InfectionStage } from \"./InfectionStage.js\";\nexport class Infection {\n    constructor() {\n        this.cure = false;\n        this.delay = 0;\n        this.enable = false;\n        this.infections = 0;\n        this.stages = [];\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.cure !== undefined) {\n            this.cure = data.cure;\n        }\n        if (data.delay !== undefined) {\n            this.delay = data.delay;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.infections !== undefined) {\n            this.infections = data.infections;\n        }\n        if (data.stages === undefined) {\n            return;\n        }\n        this.stages = data.stages.map((t) => {\n            const s = new InfectionStage();\n            s.load(t);\n            return s;\n        });\n    }\n}\n","import { Infection } from \"./Options/Classes/Infection.js\";\nexport class InfectionPlugin {\n    constructor() {\n        this.id = \"infection\";\n    }\n    async getPlugin(container) {\n        const { InfectionInstance } = await import(\"./InfectionInstance.js\");\n        return new InfectionInstance(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        let infectionOptions = options.infection;\n        if (infectionOptions?.load === undefined) {\n            options.infection = infectionOptions = new Infection();\n        }\n        infectionOptions.load(source?.infection);\n    }\n    needsPlugin(options) {\n        return options?.infection?.enable ?? false;\n    }\n}\n"],"names":["InfectionStage","constructor","this","color","OptionsColor","value","radius","rate","load","data","undefined","create","duration","infectedStage","Infection","cure","delay","enable","infections","stages","map","t","s","InfectionPlugin","id","getPlugin","container","InfectionInstance","loadOptions","options","source","_infectionOptions","needsPlugin","infectionOptions","infection","_options$infection$en","_options$infection"],"sourceRoot":""}