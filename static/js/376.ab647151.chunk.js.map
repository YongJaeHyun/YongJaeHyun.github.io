{"version":3,"file":"static/js/376.ab647151.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-light/browser/ExternalLighter.js","../node_modules/@tsparticles/interaction-light/browser/Utils.js"],"sourcesContent":["import { ExternalInteractorBase, isInArray, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLight, lightMode } from \"./Utils.js\";\nimport { Light } from \"./Options/Classes/Light.js\";\nexport class ExternalLighter extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = container.interactivity;\n        if (!options.interactivity.events.onHover.enable || interactivity.status !== \"pointermove\") {\n            return;\n        }\n        const mousePos = interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            drawLight(container, ctx, mousePos);\n        });\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, interactivity = particle?.interactivity ?? container.actualOptions.interactivity, events = interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const res = isInArray(lightMode, events.onHover.mode);\n        if (res && interactivity.modes.light) {\n            const lightGradient = interactivity.modes.light.area.gradient;\n            container.canvas.mouseLight = {\n                start: rangeColorToRgb(lightGradient.start),\n                stop: rangeColorToRgb(lightGradient.stop),\n            };\n        }\n        return res;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.light) {\n            options.light = new Light();\n        }\n        for (const source of sources) {\n            options.light.load(source?.light);\n        }\n    }\n    reset() {\n    }\n}\n","import { getStyleFromRgb } from \"@tsparticles/engine\";\nconst gradientPos = {\n    max: 1,\n    min: 0,\n}, half = 0.5, double = 2, halfPI = Math.PI * half, doublePI = Math.PI * double, quarter = 0.25, quarterPI = Math.PI * quarter, arcStart = 0;\nexport const lightMode = \"light\";\nexport function drawLight(container, context, mousePos) {\n    const lightOptions = container.actualOptions.interactivity.modes.light?.area;\n    if (!lightOptions) {\n        return;\n    }\n    context.beginPath();\n    context.arc(mousePos.x, mousePos.y, lightOptions.radius, arcStart, doublePI);\n    const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, arcStart, mousePos.x, mousePos.y, lightOptions.radius);\n    const gradientRgb = container.canvas.mouseLight;\n    if (!gradientRgb?.start || !gradientRgb.stop) {\n        return;\n    }\n    gradientAmbientLight.addColorStop(gradientPos.min, getStyleFromRgb(gradientRgb.start));\n    gradientAmbientLight.addColorStop(gradientPos.max, getStyleFromRgb(gradientRgb.stop));\n    context.fillStyle = gradientAmbientLight;\n    context.fill();\n}\nexport function drawParticleShadow(container, context, particle, mousePos) {\n    const pos = particle.getPosition(), shadowOptions = container.actualOptions.interactivity.modes.light?.shadow;\n    if (!shadowOptions) {\n        return;\n    }\n    const shadowRgb = particle.lightShadow;\n    if (!shadowRgb) {\n        return;\n    }\n    const radius = particle.getRadius(), sides = particle.sides, full = doublePI / sides, angle = -particle.rotation + quarterPI, factor = 1, dots = [];\n    for (let i = 0; i < sides; i++) {\n        dots.push({\n            x: pos.x + radius * Math.sin(angle + full * i) * factor,\n            y: pos.y + radius * Math.cos(angle + full * i) * factor,\n        });\n    }\n    const points = [], shadowLength = shadowOptions.length;\n    for (const dot of dots) {\n        const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x), end = {\n            x: dot.x + shadowLength * Math.sin(-dotAngle - halfPI),\n            y: dot.y + shadowLength * Math.cos(-dotAngle - halfPI),\n        };\n        points.push({\n            end: end,\n            start: dot,\n        });\n    }\n    const shadowColor = getStyleFromRgb(shadowRgb), lastOffset = 1, firstPos = 0, last = points.length - lastOffset;\n    for (let i = last, n = 0; i >= firstPos; n = i--) {\n        context.beginPath();\n        context.moveTo(points[i].start.x, points[i].start.y);\n        context.lineTo(points[n].start.x, points[n].start.y);\n        context.lineTo(points[n].end.x, points[n].end.y);\n        context.lineTo(points[i].end.x, points[i].end.y);\n        context.fillStyle = shadowColor;\n        context.fill();\n    }\n}\n"],"names":["ExternalLighter","ExternalInteractorBase","constructor","container","super","clear","init","interact","this","options","actualOptions","interactivity","events","onHover","enable","status","mousePos","mouse","position","canvas","draw","ctx","drawLight","Promise","resolve","isEnabled","particle","_particle$interactivi","res","isInArray","lightMode","mode","modes","light","lightGradient","area","gradient","mouseLight","start","rangeColorToRgb","stop","loadModeOptions","Light","_len","arguments","length","sources","Array","_key","source","load","reset","gradientPos","max","min","halfPI","Math","PI","doublePI","quarterPI","arcStart","context","_container$actualOpti","lightOptions","beginPath","arc","x","y","radius","gradientAmbientLight","createRadialGradient","gradientRgb","addColorStop","getStyleFromRgb","fillStyle","fill","drawParticleShadow","_container$actualOpti2","pos","getPosition","shadowOptions","shadow","shadowRgb","lightShadow","getRadius","sides","full","angle","rotation","dots","i","push","sin","cos","points","shadowLength","dot","dotAngle","atan2","end","shadowColor","n","moveTo","lineTo"],"sourceRoot":""}