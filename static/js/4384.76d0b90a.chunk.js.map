{"version":3,"file":"static/js/4384.76d0b90a.chunk.js","mappings":"+IAEO,MAAMA,EACTC,WAAAA,CAAYC,GACRC,KAAKD,UAAYA,EACjBC,KAAKC,MAAQ,CAAC,OAClB,CACA,YAAMC,CAAOC,EAAUC,EAAWC,EAAOC,GAAS,IAAAC,EAC9C,IAAKP,KAAKC,MAAMO,SAASF,GACrB,OAEJ,GACmD,QADnDC,EAAKJ,EAASM,QAAQC,KAAKC,SAASC,aACjB,SAAdR,GAAsC,UAAdA,UAAsB,IAAAG,EAAAA,EAC9CJ,EAASM,QAAQC,KAAKC,SAASE,WACb,QAAdT,GAAqC,WAAdA,GAC5B,OAEJ,MAAMU,EAAiBX,EAASM,QAAQC,KAAKK,QAAShB,EAAYC,KAAKD,UAAWiB,EAAajB,EAAUkB,OAAOC,KAAMC,EAAUhB,EAASiB,YACzI,GAAKN,EAAeO,OAWf,CACD,MAAMC,EAAWnB,EAASmB,WACpBR,EAAeS,SACjBD,EAASE,EAAIR,EAAWS,OAASN,GACnB,WAAdf,GACCU,EAAeS,SAAWD,EAASE,GAAKL,GAAyB,QAAdf,IACpDL,EAAU2B,UAAUC,OAAOxB,EAEnC,KAnB4B,CACxB,GAAKA,EAASyB,SAASJ,EAlBf,GAkBkCrB,EAASmB,SAASE,GAAKR,EAAWS,OAASN,GAChFhB,EAASyB,SAASJ,EAnBf,GAmBkCrB,EAASmB,SAASE,IAAML,GAC7DhB,EAASyB,SAASC,EApBf,GAoBkC1B,EAASmB,SAASO,GAAKb,EAAWc,MAAQX,GAC/EhB,EAASyB,SAASC,EArBf,GAqBkC1B,EAASmB,SAASO,IAAMV,EAC9D,QAECY,EAAAA,EAAAA,IAAc5B,EAASmB,SAAUvB,EAAUkB,OAAOC,KAAMc,EAAAA,GAAOC,OAAQd,EAASf,IACjFL,EAAU2B,UAAUC,OAAOxB,EAEnC,OAUM+B,QAAQC,SAClB,E","sources":["../node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js"],"sourcesContent":["import { Vector, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    async update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ??\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n        await Promise.resolve();\n    }\n}\n"],"names":["NoneOutMode","constructor","container","this","modes","update","particle","direction","delta","outMode","_ref","includes","options","move","distance","horizontal","vertical","gravityOptions","gravity","canvasSize","canvas","size","pRadius","getRadius","enable","position","inverse","y","height","particles","remove","velocity","x","width","isPointInside","Vector","origin","Promise","resolve"],"sourceRoot":""}