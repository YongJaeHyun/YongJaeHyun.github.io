{"version":3,"file":"static/js/5532.b9240084.chunk.js","mappings":"wJAAO,MAAMA,EACTC,WAAAA,CAAYC,EAAGC,EAAGC,GACdC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,CACb,CACAE,IAAAA,CAAKJ,EAAGC,GACJ,OAAOE,KAAKH,EAAIA,EAAIG,KAAKF,EAAIA,CACjC,CACAI,IAAAA,CAAKL,EAAGC,EAAGC,GACP,OAAOC,KAAKC,KAAKJ,EAAGC,GAAKE,KAAKD,EAAIA,CACtC,ECVG,MAAMI,EACTP,WAAAA,GACII,KAAKI,OAAS,CACV,IAAIT,EAAK,EAAG,EAAG,GACf,IAAIA,GAAM,EAAG,EAAG,GAChB,IAAIA,EAAK,GAAI,EAAG,GAChB,IAAIA,GAAM,GAAI,EAAG,GACjB,IAAIA,EAAK,EAAG,EAAG,GACf,IAAIA,GAAM,EAAG,EAAG,GAChB,IAAIA,EAAK,EAAG,GAAI,GAChB,IAAIA,GAAM,EAAG,GAAI,GACjB,IAAIA,EAAK,EAAG,EAAG,GACf,IAAIA,EAAK,GAAI,EAAG,GAChB,IAAIA,EAAK,EAAG,GAAI,GAChB,IAAIA,EAAK,GAAI,GAAI,IAErBK,KAAKK,GAAK,CACN,IACA,IACA,IACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,IACA,IACA,EACA,IACA,IACA,GACA,IACA,GACA,GACA,IACA,EACA,GACA,GACA,IACA,GACA,GACA,GACA,IACA,EACA,IACA,IACA,IACA,IACA,GACA,EACA,GACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,IACA,EACA,IACA,GACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,EACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,EACA,IACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,EACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,EACA,IACA,GACA,GACA,IACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,EACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,KAEJL,KAAKM,OAAS,IAAIC,MAAM,KACxBP,KAAKQ,MAAQ,IAAID,MAAM,IAC3B,CACAE,OAAAA,CAAQZ,EAAGC,GACP,MAAM,OAAEQ,EAAM,MAAEE,GAAUR,KAC1B,IAAIU,EAAIC,KAAKC,MAAMf,GAAIgB,EAAIF,KAAKC,MAAMd,GACtCD,GAAQa,EACRZ,GAAQe,EACRH,GAAQ,IACRG,GAAQ,IACR,MAAMC,EAAMR,EAAOI,EAAIF,EAAMK,IAAIZ,KAAKJ,EAAGC,GAAIiB,EAAMT,EAAOI,EAAIF,EAAMK,EAAI,IAAIZ,KAAKJ,EAAGC,EAAI,GAAIkB,EAAMV,EAAOI,EAAI,EAAIF,EAAMK,IAAIZ,KAAKJ,EAAI,EAAGC,GAAImB,EAAMX,EAAOI,EAAI,EAAIF,EAAMK,EAAI,IAAIZ,KAAKJ,EAAI,EAAGC,EAAI,GACxLoB,EAAIlB,KAAKmB,MAA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","sources":["../node_modules/@tsparticles/perlin-noise/browser/Grad.js","../node_modules/@tsparticles/perlin-noise/browser/PerlinNoise.js","../node_modules/@tsparticles/path-perlin-noise/browser/PerlinNoiseGenerator.js"],"sourcesContent":["export class Grad {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    dot2(x, y) {\n        return this.x * x + this.y * y;\n    }\n    dot3(x, y, z) {\n        return this.dot2(x, y) + this.z * z;\n    }\n}\n","import { Grad } from \"./Grad.js\";\nexport class PerlinNoise {\n    constructor() {\n        this._grad3 = [\n            new Grad(1, 1, 0),\n            new Grad(-1, 1, 0),\n            new Grad(1, -1, 0),\n            new Grad(-1, -1, 0),\n            new Grad(1, 0, 1),\n            new Grad(-1, 0, 1),\n            new Grad(1, 0, -1),\n            new Grad(-1, 0, -1),\n            new Grad(0, 1, 1),\n            new Grad(0, -1, 1),\n            new Grad(0, 1, -1),\n            new Grad(0, -1, -1),\n        ];\n        this._p = [\n            151,\n            160,\n            137,\n            91,\n            90,\n            15,\n            131,\n            13,\n            201,\n            95,\n            96,\n            53,\n            194,\n            233,\n            7,\n            225,\n            140,\n            36,\n            103,\n            30,\n            69,\n            142,\n            8,\n            99,\n            37,\n            240,\n            21,\n            10,\n            23,\n            190,\n            6,\n            148,\n            247,\n            120,\n            234,\n            75,\n            0,\n            26,\n            197,\n            62,\n            94,\n            252,\n            219,\n            203,\n            117,\n            35,\n            11,\n            32,\n            57,\n            177,\n            33,\n            88,\n            237,\n            149,\n            56,\n            87,\n            174,\n            20,\n            125,\n            136,\n            171,\n            168,\n            68,\n            175,\n            74,\n            165,\n            71,\n            134,\n            139,\n            48,\n            27,\n            166,\n            77,\n            146,\n            158,\n            231,\n            83,\n            111,\n            229,\n            122,\n            60,\n            211,\n            133,\n            230,\n            220,\n            105,\n            92,\n            41,\n            55,\n            46,\n            245,\n            40,\n            244,\n            102,\n            143,\n            54,\n            65,\n            25,\n            63,\n            161,\n            1,\n            216,\n            80,\n            73,\n            209,\n            76,\n            132,\n            187,\n            208,\n            89,\n            18,\n            169,\n            200,\n            196,\n            135,\n            130,\n            116,\n            188,\n            159,\n            86,\n            164,\n            100,\n            109,\n            198,\n            173,\n            186,\n            3,\n            64,\n            52,\n            217,\n            226,\n            250,\n            124,\n            123,\n            5,\n            202,\n            38,\n            147,\n            118,\n            126,\n            255,\n            82,\n            85,\n            212,\n            207,\n            206,\n            59,\n            227,\n            47,\n            16,\n            58,\n            17,\n            182,\n            189,\n            28,\n            42,\n            223,\n            183,\n            170,\n            213,\n            119,\n            248,\n            152,\n            2,\n            44,\n            154,\n            163,\n            70,\n            221,\n            153,\n            101,\n            155,\n            167,\n            43,\n            172,\n            9,\n            129,\n            22,\n            39,\n            253,\n            19,\n            98,\n            108,\n            110,\n            79,\n            113,\n            224,\n            232,\n            178,\n            185,\n            112,\n            104,\n            218,\n            246,\n            97,\n            228,\n            251,\n            34,\n            242,\n            193,\n            238,\n            210,\n            144,\n            12,\n            191,\n            179,\n            162,\n            241,\n            81,\n            51,\n            145,\n            235,\n            249,\n            14,\n            239,\n            107,\n            49,\n            192,\n            214,\n            31,\n            181,\n            199,\n            106,\n            157,\n            184,\n            84,\n            204,\n            176,\n            115,\n            121,\n            50,\n            45,\n            127,\n            4,\n            150,\n            254,\n            138,\n            236,\n            205,\n            93,\n            222,\n            114,\n            67,\n            29,\n            24,\n            72,\n            243,\n            141,\n            128,\n            195,\n            78,\n            66,\n            215,\n            61,\n            156,\n            180,\n        ];\n        this._gradP = new Array(512);\n        this._perm = new Array(512);\n    }\n    noise2d(x, y) {\n        const { _gradP, _perm } = this;\n        let X = Math.floor(x), Y = Math.floor(y);\n        x = x - X;\n        y = y - Y;\n        X = X & 255;\n        Y = Y & 255;\n        const n00 = _gradP[X + _perm[Y]].dot2(x, y), n01 = _gradP[X + _perm[Y + 1]].dot2(x, y - 1), n10 = _gradP[X + 1 + _perm[Y]].dot2(x - 1, y), n11 = _gradP[X + 1 + _perm[Y + 1]].dot2(x - 1, y - 1);\n        const u = this._fade(x);\n        return this._lerp(this._lerp(n00, n10, u), this._lerp(n01, n11, u), this._fade(y));\n    }\n    noise3d(x, y, z) {\n        const { _gradP: gradP, _perm: perm } = this;\n        let X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n        x = x - X;\n        y = y - Y;\n        z = z - Z;\n        X = X & 255;\n        Y = Y & 255;\n        Z = Z & 255;\n        const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z), n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1), n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z), n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1), n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z), n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1), n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z), n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1), u = this._fade(x), v = this._fade(y), w = this._fade(z);\n        return this._lerp(this._lerp(this._lerp(n000, n100, u), this._lerp(n001, n101, u), w), this._lerp(this._lerp(n010, n110, u), this._lerp(n011, n111, u), w), v);\n    }\n    seed(inputSeed) {\n        const { _grad3: grad3, _gradP: gradP, _perm: perm, _p: p } = this;\n        let seed = inputSeed;\n        if (seed > 0 && seed < 1) {\n            seed *= 65536;\n        }\n        seed = Math.floor(seed);\n        if (seed < 256) {\n            seed |= seed << 8;\n        }\n        for (let i = 0; i < 256; i++) {\n            const v = i & 1 ? p[i] ^ (seed & 255) : p[i] ^ ((seed >> 8) & 255);\n            perm[i] = perm[i + 256] = v;\n            gradP[i] = gradP[i + 256] = grad3[v % 12];\n        }\n    }\n    _fade(t) {\n        return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n    _lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n}\n","import { Vector, deepExtend, getRandom, } from \"@tsparticles/engine\";\nimport { PerlinNoise } from \"@tsparticles/perlin-noise\";\nconst double = 2, doublePI = Math.PI * double, defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    width: 0,\n    height: 0,\n    factor: {\n        angle: 0.02,\n        length: 0.01,\n    },\n    offset: {\n        x: 40000,\n        y: 40000,\n    },\n};\nexport class PerlinNoiseGenerator {\n    constructor() {\n        this._calculateField = () => {\n            const { field, noiseGen, options } = this, lengthFactor = options.factor.length, angleFactor = options.factor.angle;\n            for (let x = 0; x < options.columns; x++) {\n                const column = field[x];\n                for (let y = 0; y < options.rows; y++) {\n                    const cell = column[y];\n                    cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);\n                    cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI;\n                }\n            }\n        };\n        this._drawField = (ctx) => {\n            const { field, options } = this;\n            for (let x = 0; x < options.columns; x++) {\n                const column = field[x];\n                for (let y = 0; y < options.rows; y++) {\n                    const cell = column[y], { angle, length } = cell;\n                    ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n                    ctx.rotate(angle);\n                    ctx.strokeStyle = \"white\";\n                    ctx.beginPath();\n                    ctx.moveTo(0, 0);\n                    ctx.lineTo(0, this.options.size * length);\n                    ctx.stroke();\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\n                }\n            }\n        };\n        this._initField = () => {\n            const { columns, rows } = this.options;\n            this.field = new Array(columns);\n            for (let x = 0; x < columns; x++) {\n                this.field[x] = new Array(rows);\n                for (let y = 0; y < rows; y++) {\n                    this.field[x][y] = Vector.origin;\n                }\n            }\n        };\n        this.noiseGen = new PerlinNoise();\n        this.field = [];\n        this.noiseZ = 0;\n        this.options = deepExtend({}, defaultOptions);\n    }\n    generate(particle) {\n        const pos = particle.getPosition(), { size } = this.options, point = {\n            x: Math.max(Math.floor(pos.x / size), 0),\n            y: Math.max(Math.floor(pos.y / size), 0),\n        }, { field } = this;\n        return Promise.resolve(!field?.[point.x]?.[point.y] ? Vector.origin : field[point.x][point.y].copy());\n    }\n    async init(container) {\n        this.container = container;\n        this._setup();\n        await Promise.resolve();\n    }\n    reset() {\n    }\n    update() {\n        if (!this.container) {\n            return;\n        }\n        this._calculateField();\n        this.noiseZ += this.options.increment;\n        if (this.options.draw) {\n            this.container.canvas.draw((ctx) => this._drawField(ctx));\n        }\n    }\n    _resetField() {\n        const container = this.container;\n        if (!container) {\n            return;\n        }\n        const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;\n        options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n        options.increment =\n            sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n        options.draw = !!sourceOptions.draw;\n        const offset = sourceOptions.offset;\n        options.offset.x = offset?.x ?? defaultOptions.offset.x;\n        options.offset.y = offset?.y ?? defaultOptions.offset.y;\n        const factor = sourceOptions.factor;\n        options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n        options.factor.length = factor?.length ?? defaultOptions.factor.length;\n        options.width = container.canvas.size.width;\n        options.height = container.canvas.size.height;\n        this.options.seed = sourceOptions.seed;\n        this.noiseGen.seed(this.options.seed ?? getRandom());\n        options.columns = Math.floor(this.options.width / this.options.size) + 1;\n        options.rows = Math.floor(this.options.height / this.options.size) + 1;\n        this._initField();\n    }\n    _setup() {\n        this.noiseZ = 0;\n        this._resetField();\n        window.addEventListener(\"resize\", () => this._resetField());\n    }\n}\n"],"names":["Grad","constructor","x","y","z","this","dot2","dot3","PerlinNoise","_grad3","_p","_gradP","Array","_perm","noise2d","X","Math","floor","Y","n00","n01","n10","n11","u","_fade","_lerp","noise3d","gradP","perm","Z","n000","n001","n010","n011","n100","n101","n110","n111","v","w","seed","inputSeed","grad3","p","i","t","a","b","doublePI","PI","defaultOptions","draw","size","increment","columns","rows","width","height","factor","angle","length","offset","PerlinNoiseGenerator","_calculateField","field","noiseGen","options","lengthFactor","angleFactor","column","cell","noiseZ","_drawField","ctx","setTransform","rotate","strokeStyle","beginPath","moveTo","lineTo","stroke","_initField","Vector","origin","deepExtend","generate","particle","_field$point$x","pos","getPosition","point","max","Promise","resolve","copy","init","container","_setup","reset","update","canvas","_resetField","_offset$x","_offset$y","_factor$angle","_factor$length","_this$options$seed","sourceOptions","actualOptions","particles","move","path","getRandom","window","addEventListener"],"sourceRoot":""}