{"version":3,"file":"static/js/9900.4ba7a284.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/utils.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/EmittersCanvasShape.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/PixelsOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextFontOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextLinesOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/TextOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/Options/Classes/EmittersCanvasShapeOptions.js","../node_modules/@tsparticles/plugin-emitters-shape-canvas/browser/EmittersCanvasShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { errorPrefix, isNumber } from \"@tsparticles/engine\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, minWidth = 0;\nexport function getCanvasImageData(ctx, size, offset, clear = true) {\n    const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n    if (clear) {\n        ctx.clearRect(origin.x, origin.y, size.width, size.height);\n    }\n    const pixels = [];\n    for (let i = 0; i < imageData.length; i += offset) {\n        const idx = i / offset, pos = {\n            x: idx % size.width,\n            y: Math.floor(idx / size.width),\n        };\n        if (!pixels[pos.y]) {\n            pixels[pos.y] = [];\n        }\n        const indexesOffset = {\n            r: 0,\n            g: 1,\n            b: 2,\n            a: 3,\n        }, alphaFactor = 255;\n        pixels[pos.y][pos.x] = {\n            r: imageData[i + indexesOffset.r],\n            g: imageData[i + indexesOffset.g],\n            b: imageData[i + indexesOffset.b],\n            a: imageData[i + indexesOffset.a] / alphaFactor,\n        };\n    }\n    return {\n        pixels,\n        width: Math.min(...pixels.map((row) => row.length)),\n        height: pixels.length,\n    };\n}\nexport function getImageData(src, offset) {\n    const image = new Image();\n    image.crossOrigin = \"Anonymous\";\n    const p = new Promise((resolve, reject) => {\n        image.onerror = reject;\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return reject(new Error(`${errorPrefix} Could not get canvas context`));\n            }\n            context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n            resolve(getCanvasImageData(context, canvas, offset));\n        };\n    });\n    image.src = src;\n    return p;\n}\nexport function getTextData(textOptions, offset, fill) {\n    const canvas = document.createElement(\"canvas\"), context = canvas.getContext(\"2d\"), { font, text, lines: linesOptions, color } = textOptions;\n    if (!text || !context) {\n        return;\n    }\n    const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];\n    let maxWidth = 0, totalHeight = 0;\n    for (const line of lines) {\n        context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n        const measure = context.measureText(line), lineData = {\n            measure,\n            text: line,\n            height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n            width: measure.width,\n        };\n        maxWidth = Math.max(maxWidth || minWidth, lineData.width);\n        totalHeight += lineData.height + linesOptions.spacing;\n        linesData.push(lineData);\n    }\n    canvas.width = maxWidth;\n    canvas.height = totalHeight;\n    let currentHeight = 0;\n    for (const line of linesData) {\n        context.font = `${font.style || \"\"} ${font.variant || \"\"} ${font.weight || \"\"} ${fontSize} ${font.family}`;\n        if (fill) {\n            context.fillStyle = color;\n            context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        }\n        else {\n            context.strokeStyle = color;\n            context.strokeText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        }\n        currentHeight += line.height + linesOptions.spacing;\n    }\n    return getCanvasImageData(context, canvas, offset);\n}\n","import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, isFunction, isString } from \"@tsparticles/engine\";\nimport { getCanvasImageData, getImageData, getTextData } from \"./utils.js\";\nconst maxRetries = 100, half = 0.5;\nexport class EmittersCanvasShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n        const filter = options.filter, minAlpha = 0;\n        let filterFunc = (pixel) => pixel.a > minAlpha;\n        if (filter !== undefined) {\n            if (isString(filter)) {\n                if (Object.hasOwn(window, filter)) {\n                    const wndFilter = window[filter];\n                    if (isFunction(wndFilter)) {\n                        filterFunc = wndFilter;\n                    }\n                }\n            }\n            else {\n                filterFunc = filter;\n            }\n        }\n        this.filter = filterFunc;\n        this.scale = options.scale;\n        this.pixelData = {\n            pixels: [],\n            height: 0,\n            width: 0,\n        };\n    }\n    async init() {\n        let pixelData;\n        const options = this.options, selector = options.selector, pixels = options.pixels, image = options.image, element = options.element, text = options.text, offset = pixels.offset;\n        if (image) {\n            const url = image.src;\n            if (!url) {\n                return;\n            }\n            pixelData = await getImageData(url, offset);\n        }\n        else if (text) {\n            const data = getTextData(text, offset, this.fill);\n            if (!data) {\n                return;\n            }\n            pixelData = data;\n        }\n        else if (element ?? selector) {\n            const canvas = element ?? (selector && document.querySelector(selector));\n            if (!canvas) {\n                return;\n            }\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            pixelData = getCanvasImageData(context, canvas, offset);\n        }\n        if (!pixelData) {\n            return;\n        }\n        this.pixelData = pixelData;\n    }\n    async randomPosition() {\n        const { height, width } = this.pixelData, data = this.pixelData, position = this.position, scale = this.scale, positionOffset = {\n            x: position.x - width * scale * half,\n            y: position.y - height * scale * half,\n        };\n        for (let i = 0; i < maxRetries; i++) {\n            const nextIndex = Math.floor(getRandom() * width * height), pixelPos = {\n                x: nextIndex % width,\n                y: Math.floor(nextIndex / width),\n            }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = this.filter(pixel);\n            if (!shouldCreateParticle) {\n                continue;\n            }\n            return Promise.resolve({\n                position: {\n                    x: pixelPos.x * scale + positionOffset.x,\n                    y: pixelPos.y * scale + positionOffset.y,\n                },\n                color: { ...pixel },\n                opacity: pixel.a,\n            });\n        }\n        return Promise.resolve(null);\n    }\n    resize(position, size) {\n        super.resize(position, size);\n    }\n}\n","export class PixelsOptions {\n    constructor() {\n        this.offset = 4;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.offset !== undefined) {\n            this.offset = data.offset;\n        }\n    }\n}\n","export class TextFontOptions {\n    constructor() {\n        this.family = \"Verdana\";\n        this.size = 32;\n        this.style = \"\";\n        this.variant = \"\";\n        this.weight = \"\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.family !== undefined) {\n            this.family = data.family;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.style !== undefined) {\n            this.style = data.style;\n        }\n        if (data.variant !== undefined) {\n            this.variant = data.variant;\n        }\n        if (data.weight !== undefined) {\n            this.weight = data.weight;\n        }\n    }\n}\n","export class TextLinesOptions {\n    constructor() {\n        this.separator = \"\\n\";\n        this.spacing = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.separator !== undefined) {\n            this.separator = data.separator;\n        }\n        if (data.spacing !== undefined) {\n            this.spacing = data.spacing;\n        }\n    }\n}\n","import { TextFontOptions } from \"./TextFontOptions.js\";\nimport { TextLinesOptions } from \"./TextLinesOptions.js\";\nexport class TextOptions {\n    constructor() {\n        this.color = \"#000000\";\n        this.font = new TextFontOptions();\n        this.lines = new TextLinesOptions();\n        this.text = \"\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        this.font.load(data.font);\n        this.lines.load(data.lines);\n        if (data.text !== undefined) {\n            this.text = data.text;\n        }\n    }\n}\n","import { PixelsOptions } from \"./PixelsOptions.js\";\nimport { TextOptions } from \"./TextOptions.js\";\nconst minAlpha = 0;\nexport class EmittersCanvasShapeOptions {\n    constructor() {\n        this.filter = (pixel) => pixel.a > minAlpha;\n        this.pixels = new PixelsOptions();\n        this.scale = 1;\n        this.selector = \"\";\n        this.text = new TextOptions();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.element !== undefined) {\n            this.element = data.element;\n        }\n        if (data.filter !== undefined) {\n            this.filter = data.filter;\n        }\n        this.pixels.load(data.pixels);\n        if (data.scale !== undefined) {\n            this.scale = data.scale;\n        }\n        if (data.selector !== undefined) {\n            this.selector = data.selector;\n        }\n        if (data.image !== undefined) {\n            this.image = data.image;\n        }\n        this.text.load(data.text);\n    }\n}\n","import { EmittersCanvasShape } from \"./EmittersCanvasShape.js\";\nimport { EmittersCanvasShapeOptions } from \"./Options/Classes/EmittersCanvasShapeOptions.js\";\nexport class EmittersCanvasShapeGenerator {\n    generate(position, size, fill, options) {\n        const shapeOptions = new EmittersCanvasShapeOptions();\n        shapeOptions.load(options);\n        return new EmittersCanvasShape(position, size, fill, shapeOptions);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["origin","x","y","getCanvasImageData","ctx","size","offset","clear","arguments","length","undefined","imageData","getImageData","width","height","data","clearRect","pixels","i","idx","pos","Math","floor","indexesOffset","r","g","b","a","alphaFactor","min","map","row","EmittersCanvasShape","EmitterShapeBase","constructor","position","fill","options","super","filter","filterFunc","pixel","isString","Object","hasOwn","window","wndFilter","isFunction","this","scale","pixelData","init","selector","image","element","text","url","src","Image","crossOrigin","p","Promise","resolve","reject","onerror","onload","canvas","document","createElement","context","getContext","Error","concat","errorPrefix","drawImage","textOptions","font","lines","linesOptions","color","split","separator","fontSize","isNumber","linesData","maxWidth","totalHeight","line","style","variant","weight","family","measure","measureText","lineData","actualBoundingBoxAscent","actualBoundingBoxDescent","max","spacing","push","currentHeight","fillStyle","fillText","strokeStyle","strokeText","getTextData","querySelector","randomPosition","positionOffset","nextIndex","getRandom","pixelPos","opacity","resize","PixelsOptions","load","TextFontOptions","TextLinesOptions","TextOptions","EmittersCanvasShapeOptions","EmittersCanvasShapeGenerator","generate","shapeOptions"],"sourceRoot":""}