{"version":3,"file":"static/js/6236.b02792d8.chunk.js","mappings":"0KAGA,SAASA,EAAuBC,EAAUC,GACtC,OAAOD,EAAWC,IAAUC,EAAAA,EAAAA,MAAcC,EAAAA,GAC9C,CACO,MAAMC,UAA4BC,EAAAA,EACrCC,WAAAA,CAAYN,EAAUO,EAAMC,EAAMC,GAC9BC,MAAMV,EAAUO,EAAMC,EAAMC,EAChC,CACA,UAAME,GACN,CACA,oBAAMC,GACF,aAAa,IAAIC,SAASC,IACtB,MAAMN,EAAOO,KAAKP,KAAMR,EAAWe,KAAKf,SAAUO,EAAOQ,KAAKR,KAC9D,GAAIC,EACA,OAAOM,EAAQ,CACXd,SAAU,CACNgB,EAAGjB,EAAuBC,EAASgB,EAAGT,EAAKU,OAC3CC,EAAGnB,EAAuBC,EAASkB,EAAGX,EAAKY,WAIlD,CACD,MAAMC,EAtBT,GAsBiBb,EAAKU,MAAcI,EAtBpC,GAsB4Cd,EAAKY,OAAeG,EAAOC,KAAKC,MAtB/D,GAsBqEtB,EAAAA,EAAAA,OAAsBuB,EAtB/E,IAsBoFvB,EAAAA,EAAAA,MAAcC,EAAAA,IACxH,OAAQmB,GACJ,KAAK,EACD,OAAOR,EAAQ,CACXd,SAAU,CACNgB,EAAGhB,EAASgB,EAAIS,EAAIL,EACpBF,EAAGlB,EAASkB,EAAIG,KAG5B,KAAK,EACD,OAAOP,EAAQ,CACXd,SAAU,CACNgB,EAAGhB,EAASgB,EAAII,EAChBF,EAAGlB,EAASkB,EAAIO,EAAIJ,KAGhC,KAAK,EACD,OAAOP,EAAQ,CACXd,SAAU,CACNgB,EAAGhB,EAASgB,EAAIS,EAAIL,EACpBF,EAAGlB,EAASkB,EAAIG,KAI5B,QACI,OAAOP,EAAQ,CACXd,SAAU,CACNgB,EAAGhB,EAASgB,EAAII,EAChBF,EAAGlB,EAASkB,EAAIO,EAAIJ,KAIxC,IAER,ECzDG,MAAMK,EACTC,QAAAA,CAAS3B,EAAUO,EAAMC,EAAMC,GAC3B,OAAO,IAAIL,EAAoBJ,EAAUO,EAAMC,EAAMC,EACzD,E,kCCJG,MAAMJ,EACTC,WAAAA,CAAYN,EAAUO,EAAMC,EAAMC,GAC9BM,KAAKf,SAAWA,EAChBe,KAAKR,KAAOA,EACZQ,KAAKP,KAAOA,EACZO,KAAKN,QAAUA,CACnB,CACAmB,MAAAA,CAAO5B,EAAUO,GACbQ,KAAKf,SAAWA,EAChBe,KAAKR,KAAOA,CAChB,E","sources":["../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        return await new Promise((success) => {\n            const fill = this.fill, position = this.position, size = this.size;\n            if (fill) {\n                return success({\n                    position: {\n                        x: randomSquareCoordinate(position.x, size.width),\n                        y: randomSquareCoordinate(position.y, size.height),\n                    },\n                });\n            }\n            else {\n                const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n                switch (side) {\n                    case 0:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y - halfH,\n                            },\n                        });\n                    case 1:\n                        return success({\n                            position: {\n                                x: position.x - halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                    case 2:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y + halfH,\n                            },\n                        });\n                    case 3:\n                    default:\n                        return success({\n                            position: {\n                                x: position.x + halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                }\n            }\n        });\n    }\n}\n","import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["randomSquareCoordinate","position","offset","getRandom","halfRandom","EmittersSquareShape","EmitterShapeBase","constructor","size","fill","options","super","init","randomPosition","Promise","success","this","x","width","y","height","halfW","halfH","side","Math","floor","v","EmittersSquareShapeGenerator","generate","resize"],"sourceRoot":""}