{"version":3,"file":"static/js/428.fae75f28.chunk.js","mappings":"qJACA,MAAMA,EAAa,CAAC,OAAQ,MAAO,MAAO,cAAeC,EAAS,CAC9D,MACA,QACA,MACA,QACA,OACA,MACA,OACA,QACA,OACA,QACA,OACA,MACA,MACA,OACA,QAoBG,MAAMC,EACTC,WAAAA,CAAYC,EAAWC,GACnBC,KAAKC,gBAAkB,GACvBD,KAAKE,aAAeC,UAChB,MAAMC,EAAUJ,KAAKK,WAAWC,OAAOF,QACvC,GAAKA,EAGL,OAAO,IAAIG,SAASC,IAAY,IAAAC,EAAAC,EAAAC,EAC5B,MAAMC,EAASR,EAAQS,cAAsB,QAATJ,EAACK,EAAKC,WAAG,IAAAN,EAAAA,EAAIT,KAAKK,WAAWW,cAAcC,UAA2BC,EAAwB,QAAhBR,EAAGI,EAAKI,gBAAQ,IAAAR,EAAAA,EAAIV,KAAKC,gBAApC,GAAiEkB,EAAW,IAAIC,cAAcR,EAAQ,CACzMM,aACAG,EAAS,GACbF,EAASG,iBAAiB,iBAAkBC,IACxCF,EAAOG,KAAKD,EAAMT,KAAK,IAE3BK,EAASG,iBAAiB,QAAQ,KAC9Bd,EAAQ,IAAIiB,KAAKJ,EAAQ,CAAEK,KAAMR,IAAY,IAEjDC,EAASQ,QACTC,YAAW,KACPT,EAASU,MAAM,GACH,QAAflB,EAAEG,EAAKgB,gBAAQ,IAAAnB,EAAAA,EAVmB,EAUGoB,EAAAA,GAAsB,GAC9D,EAEN/B,KAAKK,WAAaP,EAClBE,KAAKgC,QAAUjC,EACfC,KAAKC,gBA5Cb,WACI,MAAMgC,EAAeP,GAASN,cAAcc,gBAAgBR,GAAOS,EAAY,GAe/E,OAdAzC,EAAW0C,SAASV,IAChB,MAAMR,EAAW,SAAHmB,OAAYX,GAC1B/B,EAAOyC,SAASE,GAAU,CAAC,GAADD,OACnBnB,EAAQ,YAAAmB,OAAWC,GAAK,GAAAD,OACxBnB,EAAQ,YAAAmB,OAAWC,EAAMC,gBAC9BH,SAASI,IACHP,EAAYO,IACZL,EAAUX,KAAKgB,EACnB,MAEAP,EAAYf,IACZiB,EAAUX,KAAKN,EACnB,IAEGiB,CACX,CA2B+BM,EAC3B,CACA,YAAMC,CAAOhB,EAAMZ,GACf,MAAM6B,EAAM,CACRR,WAAW,GAEf,GACS,UADDT,EAEAiB,EAAIR,WAAY,EAChBQ,EAAIC,WAAa5C,KAAKE,aAAaY,GAG3C,OAAO6B,CACX,E","sources":["../node_modules/@tsparticles/plugin-export-video/browser/ExportVideoInstance.js"],"sourcesContent":["import { millisecondsToSeconds, } from \"@tsparticles/engine\";\nconst videoTypes = [\"webm\", \"ogg\", \"mp4\", \"x-matroska\"], codecs = [\n    \"vp9\",\n    \"vp9.0\",\n    \"vp8\",\n    \"vp8.0\",\n    \"avc1\",\n    \"av1\",\n    \"h265\",\n    \"h.265\",\n    \"h264\",\n    \"h.264\",\n    \"opus\",\n    \"pcm\",\n    \"aac\",\n    \"mpeg\",\n    \"mp4a\",\n];\nfunction getVideoSupportedMimeTypes() {\n    const isSupported = (type) => MediaRecorder.isTypeSupported(type), supported = [];\n    videoTypes.forEach((type) => {\n        const mimeType = `video/${type}`;\n        codecs.forEach((codec) => [\n            `${mimeType};codecs=${codec}`,\n            `${mimeType};codecs=${codec.toUpperCase()}`,\n        ].forEach((variation) => {\n            if (isSupported(variation)) {\n                supported.push(variation);\n            }\n        }));\n        if (isSupported(mimeType)) {\n            supported.push(mimeType);\n        }\n    });\n    return supported;\n}\nexport class ExportVideoInstance {\n    constructor(container, engine) {\n        this._supportedTypes = [];\n        this._exportVideo = async (data) => {\n            const element = this._container.canvas.element;\n            if (!element) {\n                return;\n            }\n            return new Promise((resolve) => {\n                const stream = element.captureStream(data.fps ?? this._container.actualOptions.fpsLimit), firstIndex = 0, mimeType = data.mimeType ?? this._supportedTypes[firstIndex], recorder = new MediaRecorder(stream, {\n                    mimeType,\n                }), chunks = [], defaultDuration = 5;\n                recorder.addEventListener(\"dataavailable\", (event) => {\n                    chunks.push(event.data);\n                });\n                recorder.addEventListener(\"stop\", () => {\n                    resolve(new Blob(chunks, { type: mimeType }));\n                });\n                recorder.start();\n                setTimeout(() => {\n                    recorder.stop();\n                }, data.duration ?? defaultDuration * millisecondsToSeconds);\n            });\n        };\n        this._container = container;\n        this._engine = engine;\n        this._supportedTypes = getVideoSupportedMimeTypes();\n    }\n    async export(type, data) {\n        const res = {\n            supported: false,\n        };\n        switch (type) {\n            case \"video\":\n                res.supported = true;\n                res.blob = await this._exportVideo(data);\n                break;\n        }\n        return res;\n    }\n}\n"],"names":["videoTypes","codecs","ExportVideoInstance","constructor","container","engine","this","_supportedTypes","_exportVideo","async","element","_container","canvas","Promise","resolve","_data$fps","_data$mimeType","_data$duration","stream","captureStream","data","fps","actualOptions","fpsLimit","mimeType","recorder","MediaRecorder","chunks","addEventListener","event","push","Blob","type","start","setTimeout","stop","duration","millisecondsToSeconds","_engine","isSupported","isTypeSupported","supported","forEach","concat","codec","toUpperCase","variation","getVideoSupportedMimeTypes","export","res","blob"],"sourceRoot":""}