{"version":3,"file":"static/js/6816.05538291.chunk.js","mappings":"qJAEO,MAAMA,UAA0BC,EAAAA,GACnCC,WAAAA,CAAYC,GACRC,MAAMD,EACV,CACAE,KAAAA,GACA,CACAC,IAAAA,GACA,CACA,cAAMC,CAASC,EAAIC,GAAO,IAAAC,EAAAC,EACtB,MAAMC,EAAWC,KAAKV,UAAUS,SAChC,IAAKA,EACD,OAGJ,GADAA,EAASE,gBAAgBN,EAAIC,EAAMM,YACPC,KAAZ,QAAZN,EAAAF,EAAGS,iBAAS,IAAAP,OAAA,EAAZA,EAAcQ,OACd,OAEJ,MAAMf,EAAYU,KAAKV,UAA8CgB,EAAzBhB,EAAUiB,cAA0CH,UAChG,GAAqB,OAAhBE,QAAgB,IAAhBA,IAAAA,EAAkBE,QAAUF,EAAiBG,OAAOC,OAnB1C,EAoBX,OAEJ,MAAMC,EAAkBL,EAAiBG,OAAOd,EAAGS,UAAUC,OAAQO,EAAUtB,EAAUuB,OAAOC,WAAYC,EAtBjF,EAsB0FpB,EAAGqB,YAAuBL,EAAgBI,OAASH,EAASK,EAAMtB,EAAGuB,cAAeC,EAA8C,QAAhCrB,EAAGa,EAAgBS,qBAAa,IAAAtB,EAAAA,EAAIH,EAAGS,UAAUC,MAAOgB,EAAQ/B,EAAUgC,UAAUC,SAASC,YAAYP,EAAKF,GAASU,EAAad,EAAgBe,KAAMC,EAAYN,EAAMX,OACnY,IAAK,MAAMkB,KAAMP,EAAO,KAAAQ,EAAAC,EACpB,MAAMC,EAAQH,EACd,KAAIG,IAAUpC,GACVoC,EAAMC,WACND,EAAME,eACuB9B,KAAZ,QAAf0B,EAAAE,EAAM3B,iBAAS,IAAAyB,OAAA,EAAfA,EAAiBxB,QAAuB0B,EAAM3B,UAAUC,QAAUV,EAAGS,UAAUC,QACjF6B,EAAAA,EAAAA,OAAeT,EAAaE,GAGhC,QAA+BxB,KAAZ,QAAf2B,EAAAC,EAAM3B,iBAAS,IAAA0B,OAAA,EAAfA,EAAiBzB,OACjBN,EAASoC,eAAeJ,EAAOZ,QAE9B,GAAIY,EAAM3B,UAAUC,MAAQV,EAAGS,UAAUC,MAC1CN,EAASqC,qBAAqBL,EAAOZ,QAEpC,GAAIY,EAAM3B,UAAUC,MAAQV,EAAGS,UAAUC,MAAO,KAAAgC,EACjD,MAAMC,EAAkBhC,EAAiBG,OAAOsB,EAAM3B,UAAUC,OAC1DkC,EAA+C,QAAjCF,EAAkB,OAAfC,QAAe,IAAfA,OAAe,EAAfA,EAAiBlB,qBAAa,IAAAiB,EAAAA,EAAIN,EAAM3B,UAAUC,MACzEN,EAASqC,qBAAqBzC,EAAI4C,EACtC,CACJ,OACMC,QAAQC,SAClB,CACAC,SAAAA,GAAY,IAAAC,EAAAC,EACR,OAAsD,QAAtDD,EAAmC,QAAnCC,EAAO5C,KAAKV,UAAUiB,qBAAa,IAAAqC,GAAW,QAAXA,EAA5BA,EAA8BxC,iBAAS,IAAAwC,OAAA,EAAvCA,EAAyCpC,cAAM,IAAAmC,GAAAA,CAC1D,CACAE,KAAAA,GACA,E","sources":["../node_modules/@tsparticles/plugin-infection/browser/ParticlesInfecter.js"],"sourcesContent":["import { ParticlesInteractorBase, getRandom } from \"@tsparticles/engine\";\nconst minStagesCount = 1, double = 2;\nexport class ParticlesInfecter extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        const infecter = this.container.infecter;\n        if (!infecter) {\n            return;\n        }\n        infecter.updateInfection(p1, delta.value);\n        if (p1.infection?.stage === undefined) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, infectionOptions = options.infection;\n        if (!infectionOptions?.enable || infectionOptions.stages.length < minStagesCount) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[p1.infection.stage], pxRatio = container.retina.pixelRatio, radius = p1.getRadius() * double + infectionStage1.radius * pxRatio, pos = p1.getPosition(), infectedStage1 = infectionStage1.infectedStage ?? p1.infection.stage, query = container.particles.quadTree.queryCircle(pos, radius), infections = infectionStage1.rate, neighbors = query.length;\n        for (const p2 of query) {\n            const infP2 = p2;\n            if (infP2 === p1 ||\n                infP2.destroyed ||\n                infP2.spawning ||\n                !(infP2.infection?.stage === undefined || infP2.infection.stage !== p1.infection.stage) ||\n                getRandom() >= infections / neighbors) {\n                continue;\n            }\n            if (infP2.infection?.stage === undefined) {\n                infecter.startInfection(infP2, infectedStage1);\n            }\n            else if (infP2.infection.stage < p1.infection.stage) {\n                infecter.updateInfectionStage(infP2, infectedStage1);\n            }\n            else if (infP2.infection.stage > p1.infection.stage) {\n                const infectionStage2 = infectionOptions.stages[infP2.infection.stage];\n                const infectedStage2 = infectionStage2?.infectedStage ?? infP2.infection.stage;\n                infecter.updateInfectionStage(p1, infectedStage2);\n            }\n        }\n        await Promise.resolve();\n    }\n    isEnabled() {\n        return this.container.actualOptions?.infection?.enable ?? false;\n    }\n    reset() {\n    }\n}\n"],"names":["ParticlesInfecter","ParticlesInteractorBase","constructor","container","super","clear","init","interact","p1","delta","_p1$infection","_infectionStage1$infe","infecter","this","updateInfection","value","undefined","infection","stage","infectionOptions","actualOptions","enable","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","getRadius","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","queryCircle","infections","rate","neighbors","p2","_infP2$infection","_infP2$infection2","infP2","destroyed","spawning","getRandom","startInfection","updateInfectionStage","_infectionStage2$infe","infectionStage2","infectedStage2","Promise","resolve","isEnabled","_this$container$actua","_this$container$actua2","reset"],"sourceRoot":""}