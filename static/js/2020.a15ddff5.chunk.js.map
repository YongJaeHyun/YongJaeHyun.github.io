{"version":3,"file":"static/js/2020.a15ddff5.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-image/browser/ImageDrawer.js"],"sourcesContent":["import { errorPrefix } from \"@tsparticles/engine\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    async draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const { drawGif } = await import(\"./GifUtils/Utils.js\");\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    async loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            await this.loadImageShape(imageData);\n            await this.loadShape(particle);\n        }\n    }\n    async particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                void this.particleInit(container, particle);\n            });\n            return;\n        }\n        let imageRes;\n        if (image.svgData && color) {\n            const { replaceImageColor } = await import(\"./Utils.js\");\n            imageRes = await replaceImageColor(image, imageData, color, particle);\n        }\n        else {\n            imageRes = {\n                color,\n                data: image,\n                element: image.element,\n                gif: image.gif,\n                gifData: image.gifData,\n                gifLoopCount: image.gifLoopCount,\n                loaded: true,\n                ratio: imageData.width && imageData.height\n                    ? imageData.width / imageData.height\n                    : image.ratio ?? defaultRatio,\n                replaceColor: replaceColor,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n            image: imageRes,\n            fill,\n            close,\n        };\n        particle.image = imageShape.image;\n        particle.shapeFill = imageShape.fill;\n        particle.shapeClose = imageShape.close;\n    }\n}\n"],"names":["ImageDrawer","constructor","engine","this","loadImageShape","async","_imageShape$replaceCo","_engine","loadImage","Error","concat","errorPrefix","gif","imageShape","name","replaceColor","src","addImage","image","images","push","draw","data","context","radius","particle","opacity","element","globalAlpha","gifData","drawGif","ratio","pos","x","y","diameter","drawImage","getSidesCount","init","container","options","actualOptions","preload","imageData","loadShape","shape","shapeData","find","t","source","particleInit","_imageData$replaceCol","_imageData$fill","_imageData$close","color","getFillColor","loading","setTimeout","imageRes","svgData","replaceImageColor","_image$ratio","gifLoopCount","loaded","width","height","fill","shapeFill","close","shapeClose"],"sourceRoot":""}