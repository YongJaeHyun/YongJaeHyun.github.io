{"version":3,"file":"static/js/5776.d3724ce5.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-infection/browser/Infecter.js","../node_modules/@tsparticles/plugin-infection/browser/InfectionInstance.js"],"sourcesContent":["import { millisecondsToSeconds } from \"@tsparticles/engine\";\nconst minStage = 0, minDuration = 0;\nexport class Infecter {\n    constructor(container) {\n        this._nextInfectionStage = (particle) => {\n            const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n            if (!infectionOptions || !infection) {\n                return;\n            }\n            const stagesCount = infectionOptions.stages.length;\n            if (stagesCount <= minStage || infection.stage === undefined) {\n                return;\n            }\n            infection.time = 0;\n            if (stagesCount <= ++infection.stage) {\n                if (infectionOptions.cure) {\n                    delete infection.stage;\n                    delete infection.time;\n                }\n                else {\n                    infection.stage = 0;\n                    infection.time = 0;\n                }\n            }\n        };\n        this._container = container;\n    }\n    startInfection(particle, stage) {\n        const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n        if (!infectionOptions || !infection) {\n            return;\n        }\n        const stages = infectionOptions.stages, stagesCount = stages.length;\n        if (stage > stagesCount || stage < minStage) {\n            return;\n        }\n        infection.delay = 0;\n        infection.delayStage = stage;\n    }\n    updateInfection(particle, delta) {\n        const infectionOptions = this._container.actualOptions.infection, { infection } = particle;\n        if (!infectionOptions || !infection) {\n            return;\n        }\n        const stages = infectionOptions.stages, stagesCount = stages.length;\n        if (infection.delay !== undefined && infection.delayStage !== undefined) {\n            const stage = infection.delayStage;\n            if (stage > stagesCount || stage < minStage) {\n                return;\n            }\n            if (infection.delay >= infectionOptions.delay * millisecondsToSeconds) {\n                infection.stage = stage;\n                infection.time = 0;\n                delete infection.delay;\n                delete infection.delayStage;\n            }\n            else {\n                infection.delay += delta;\n            }\n        }\n        else {\n            delete infection.delay;\n            delete infection.delayStage;\n        }\n        if (infection.stage !== undefined && infection.time !== undefined) {\n            const infectionStage = stages[infection.stage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= minDuration) {\n                if (infection.time > infectionStage.duration * millisecondsToSeconds) {\n                    this._nextInfectionStage(particle);\n                }\n                else {\n                    infection.time += delta;\n                }\n            }\n            else {\n                infection.time += delta;\n            }\n        }\n        else {\n            delete infection.stage;\n            delete infection.time;\n        }\n    }\n    updateInfectionStage(particle, stage) {\n        const options = this._container.actualOptions, { infection } = particle;\n        if (!options.infection || !infection) {\n            return;\n        }\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < minStage || (infection.stage !== undefined && infection.stage > stage)) {\n            return;\n        }\n        infection.stage = stage;\n        infection.time = 0;\n    }\n}\n","import { itemFromArray } from \"@tsparticles/engine\";\nimport { Infecter } from \"./Infecter.js\";\nconst minStage = 0;\nexport class InfectionInstance {\n    constructor(container) {\n        this._container = container;\n        this._container.infecter = new Infecter(this._container);\n    }\n    particleFillColor(particle) {\n        const options = this._container.actualOptions;\n        if (!particle.infection || !options.infection) {\n            return;\n        }\n        const infectionStage = particle.infection.stage, infection = options.infection, infectionStages = infection.stages;\n        return infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    }\n    particleStrokeColor(particle) {\n        return this.particleFillColor(particle);\n    }\n    particlesSetup() {\n        const options = this._container.actualOptions;\n        if (!options.infection) {\n            return;\n        }\n        for (let i = 0; i < options.infection.infections; i++) {\n            const notInfected = this._container.particles.filter((p) => {\n                const infP = p;\n                if (!infP.infection) {\n                    infP.infection = {};\n                }\n                return infP.infection.stage === undefined;\n            });\n            const infected = itemFromArray(notInfected);\n            this._container.infecter?.startInfection(infected, minStage);\n        }\n    }\n}\n"],"names":["Infecter","constructor","container","this","_nextInfectionStage","particle","infectionOptions","_container","actualOptions","infection","stagesCount","stages","length","undefined","stage","time","cure","startInfection","delay","delayStage","updateInfection","delta","millisecondsToSeconds","infectionStage","duration","updateInfectionStage","options","InfectionInstance","infecter","particleFillColor","infectionStages","color","particleStrokeColor","particlesSetup","i","infections","_this$_container$infe","notInfected","particles","filter","p","infP","infected","itemFromArray"],"sourceRoot":""}