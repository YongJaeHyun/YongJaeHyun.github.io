{"version":3,"file":"static/js/8440.0f680739.chunk.js","mappings":"sJAEO,MAAMA,EACTC,WAAAA,CAAYC,GACRC,KAAKD,UAAYA,CACrB,CACA,UAAME,CAAKC,GAAU,IAAAC,EAAAC,EAAAC,EACjB,MAAMN,EAAYC,KAAKD,UAAWO,EAAUJ,EAASI,QAC/CC,GAASC,EAAAA,EAAAA,IAAyBF,EAAQC,OAAQL,EAASO,GAAIH,EAAQI,kBAC7ER,EAASS,aAAcC,EAAAA,EAAAA,IAAcL,EAAOM,OAASd,EAAUe,OAAOC,WACtEb,EAASc,eAAgBJ,EAAAA,EAAAA,IAA4B,QAAfT,EAACI,EAAOU,eAAO,IAAAd,EAAAA,EATtC,GAUfD,EAASgB,gBAA8B,QAAfd,EAAGG,EAAOY,aAAK,IAAAf,OAAA,EAAZA,EAAcgB,UACzC,MAAMC,EAA8C,QAAhChB,GAAGiB,EAAAA,EAAAA,IAAgBf,EAAOY,cAAM,IAAAd,EAAAA,EAAIH,EAASqB,eAC7DF,IACAnB,EAASsB,aAAcC,EAAAA,EAAAA,IAAuBJ,EAAgBnB,EAASgB,gBAAiBnB,EAAUe,OAAOY,qBAEvGC,QAAQC,SAClB,CACAC,SAAAA,CAAU3B,GACN,MAAMiB,EAAQjB,EAASgB,iBAAiB,YAAEM,GAAgBtB,EAC1D,OAASA,EAAS4B,YACb5B,EAAS6B,YACRZ,SACyBa,KAAd,OAAXR,QAAW,IAAXA,OAAW,EAAXA,EAAaS,EAAEC,QAAuBV,EAAYS,EAAEE,aACxBH,KAAd,OAAXR,QAAW,IAAXA,OAAW,EAAXA,EAAaY,EAAEF,QAAuBV,EAAYY,EAAED,aAC3BH,KAAd,OAAXR,QAAW,IAAXA,OAAW,EAAXA,EAAaa,EAAEH,QAAuBV,EAAYa,EAAEF,OACjE,CACA,YAAMG,CAAOpC,EAAUqC,GACdvC,KAAK6B,UAAU3B,MAGpBsC,EAAAA,EAAAA,IAAYtC,EAASsB,YAAae,SAC5BZ,QAAQC,UAClB,E","sources":["../node_modules/@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js"],"sourcesContent":["import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n        await Promise.resolve();\n    }\n}\n"],"names":["StrokeColorUpdater","constructor","container","this","init","particle","_stroke$opacity","_stroke$color","_rangeColorToHsl","options","stroke","itemFromSingleOrMultiple","id","reduceDuplicates","strokeWidth","getRangeValue","width","retina","pixelRatio","strokeOpacity","opacity","strokeAnimation","color","animation","strokeHslColor","rangeColorToHsl","getFillColor","strokeColor","getHslAnimationFromHsl","reduceFactor","Promise","resolve","isEnabled","destroyed","spawning","undefined","h","value","enable","s","l","update","delta","updateColor"],"sourceRoot":""}