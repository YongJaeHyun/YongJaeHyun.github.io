{"version":3,"file":"static/js/4429.0a05c3ba.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-canvas-mask/browser/utils.js","../node_modules/@tsparticles/plugin-canvas-mask/browser/CanvasMaskInstance.js"],"sourcesContent":["import { errorPrefix, getRandom, isNumber, percentDenominator, } from \"@tsparticles/engine\";\nconst half = 0.5, origin = {\n    x: 0,\n    y: 0,\n}, defaultWidth = 0;\nexport async function addParticlesFromCanvasPixels(container, data, position, scale, override, filter) {\n    const { height, width } = data, numPixels = height * width, indexArray = shuffle(range(numPixels)), maxParticles = Math.min(numPixels, container.actualOptions.particles.number.value), canvasSize = container.canvas.size;\n    let selectedPixels = 0;\n    const positionOffset = {\n        x: (canvasSize.width * position.x) / percentDenominator - width * scale * half,\n        y: (canvasSize.height * position.y) / percentDenominator - height * scale * half,\n    };\n    while (selectedPixels < maxParticles && indexArray.length) {\n        const defaultIndex = 0, nextIndex = indexArray.pop() ?? defaultIndex, pixelPos = {\n            x: nextIndex % width,\n            y: Math.floor(nextIndex / width),\n        }, pixel = data.pixels[pixelPos.y][pixelPos.x], shouldCreateParticle = filter(pixel);\n        if (!shouldCreateParticle) {\n            continue;\n        }\n        const pos = {\n            x: pixelPos.x * scale + positionOffset.x,\n            y: pixelPos.y * scale + positionOffset.y,\n        }, pOptions = {};\n        if (override.color) {\n            pOptions.color = {\n                value: pixel,\n            };\n        }\n        if (override.opacity) {\n            pOptions.opacity = {\n                value: pixel.a,\n            };\n        }\n        await container.particles.addParticle(pos, pOptions);\n        selectedPixels++;\n    }\n}\nexport function getCanvasImageData(ctx, size, offset, clear = true) {\n    const imageData = ctx.getImageData(origin.x, origin.y, size.width, size.height).data;\n    if (clear) {\n        ctx.clearRect(origin.x, origin.y, size.width, size.height);\n    }\n    const pixels = [];\n    for (let i = 0; i < imageData.length; i += offset) {\n        const idx = i / offset, pos = {\n            x: idx % size.width,\n            y: Math.floor(idx / size.width),\n        };\n        if (!pixels[pos.y]) {\n            pixels[pos.y] = [];\n        }\n        const indexesOffset = {\n            r: 0,\n            g: 1,\n            b: 2,\n            a: 3,\n        }, alphaFactor = 255;\n        pixels[pos.y][pos.x] = {\n            r: imageData[i + indexesOffset.r],\n            g: imageData[i + indexesOffset.g],\n            b: imageData[i + indexesOffset.b],\n            a: imageData[i + indexesOffset.a] / alphaFactor,\n        };\n    }\n    return {\n        pixels,\n        width: Math.min(...pixels.map((row) => row.length)),\n        height: pixels.length,\n    };\n}\nexport function getImageData(src, offset) {\n    const image = new Image();\n    image.crossOrigin = \"Anonymous\";\n    const p = new Promise((resolve, reject) => {\n        image.onerror = reject;\n        image.onload = () => {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return reject(new Error(`${errorPrefix} Could not get canvas context`));\n            }\n            context.drawImage(image, origin.x, origin.y, image.width, image.height, origin.x, origin.y, canvas.width, canvas.height);\n            resolve(getCanvasImageData(context, canvas, offset));\n        };\n    });\n    image.src = src;\n    return p;\n}\nexport function getTextData(textOptions, offset) {\n    const canvas = document.createElement(\"canvas\"), context = canvas.getContext(\"2d\"), { font, text, lines: linesOptions, color } = textOptions;\n    if (!text || !context) {\n        return;\n    }\n    const lines = text.split(linesOptions.separator), fontSize = isNumber(font.size) ? `${font.size}px` : font.size, linesData = [];\n    let maxWidth = 0, totalHeight = 0;\n    for (const line of lines) {\n        context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n        const measure = context.measureText(line), lineData = {\n            measure,\n            text: line,\n            height: measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent,\n            width: measure.width,\n        };\n        maxWidth = Math.max(maxWidth || defaultWidth, lineData.width);\n        totalHeight += lineData.height + linesOptions.spacing;\n        linesData.push(lineData);\n    }\n    canvas.width = maxWidth;\n    canvas.height = totalHeight;\n    let currentHeight = 0;\n    for (const line of linesData) {\n        context.font = `${font.style ?? \"\"} ${font.variant ?? \"\"} ${font.weight ?? \"\"} ${fontSize} ${font.family}`;\n        context.fillStyle = color;\n        context.fillText(line.text, origin.x, currentHeight + line.measure.actualBoundingBoxAscent);\n        currentHeight += line.height + linesOptions.spacing;\n    }\n    return getCanvasImageData(context, canvas, offset);\n}\nfunction shuffle(array) {\n    const lengthOffset = 1, minIndex = 0;\n    for (let currentIndex = array.length - lengthOffset; currentIndex >= minIndex; currentIndex--) {\n        const randomIndex = Math.floor(getRandom() * currentIndex);\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n    return array;\n}\nconst range = (n) => [...Array(n).keys()];\n","import { addParticlesFromCanvasPixels, getCanvasImageData, getImageData, getTextData, } from \"./utils.js\";\nexport class CanvasMaskInstance {\n    constructor(container) {\n        this._container = container;\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions.canvasMask;\n        if (!options?.enable) {\n            return;\n        }\n        let pixelData = {\n            pixels: [],\n            height: 0,\n            width: 0,\n        };\n        const offset = options.pixels.offset;\n        if (options.image) {\n            const url = options.image.src;\n            if (!url) {\n                return;\n            }\n            pixelData = await getImageData(url, offset);\n        }\n        else if (options.text) {\n            const textOptions = options.text;\n            const data = getTextData(textOptions, offset);\n            if (!data) {\n                return;\n            }\n            pixelData = data;\n        }\n        else if (options.element ?? options.selector) {\n            const canvas = options.element ?? (options.selector && document.querySelector(options.selector));\n            if (!canvas) {\n                return;\n            }\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            pixelData = getCanvasImageData(context, canvas, offset);\n        }\n        await addParticlesFromCanvasPixels(container, pixelData, options.position, options.scale, options.override, options.pixels.filter);\n    }\n}\n"],"names":["origin","x","y","async","addParticlesFromCanvasPixels","container","data","position","scale","override","filter","height","width","numPixels","indexArray","array","lengthOffset","minIndex","currentIndex","length","randomIndex","Math","floor","getRandom","shuffle","range","maxParticles","min","actualOptions","particles","number","value","canvasSize","canvas","size","selectedPixels","positionOffset","percentDenominator","_indexArray$pop","defaultIndex","nextIndex","pop","pixelPos","pixel","pixels","pos","pOptions","color","opacity","a","addParticle","getCanvasImageData","ctx","offset","clear","arguments","undefined","imageData","getImageData","clearRect","i","idx","indexesOffset","r","g","b","alphaFactor","map","row","n","Array","keys","CanvasMaskInstance","constructor","this","_container","init","_options$element","options","canvasMask","enable","pixelData","image","url","src","Image","crossOrigin","p","Promise","resolve","reject","onerror","onload","document","createElement","context","getContext","Error","concat","errorPrefix","drawImage","text","textOptions","font","lines","linesOptions","split","separator","fontSize","isNumber","linesData","maxWidth","totalHeight","line","_font$style","_font$variant","_font$weight","style","variant","weight","family","measure","measureText","lineData","actualBoundingBoxAscent","actualBoundingBoxDescent","max","spacing","push","currentHeight","_font$style2","_font$variant2","_font$weight2","fillStyle","fillText","getTextData","element","selector","_options$element2","querySelector"],"sourceRoot":""}