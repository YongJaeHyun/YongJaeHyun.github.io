{"version":3,"file":"static/js/8012.70cbf91e.chunk.js","mappings":"iKACA,MAAkBA,EAAH,EAAcC,KAAKC,GAAaC,EAAW,IACnD,SAASC,EAAaC,GACzB,MAAMC,EAAUD,EAASE,QAAQC,KACjC,GAAY,OAAPF,QAAO,IAAPA,GAAAA,EAASG,OAiBd,GAPAJ,EAASG,KAAO,CACZC,OAAQH,EAAQG,OAChBC,WAA6B,eAAjBJ,EAAQK,MAA0C,SAAjBL,EAAQK,KACrDC,SAA2B,aAAjBN,EAAQK,MAAwC,SAAjBL,EAAQK,KACjDE,OAAOC,EAAAA,EAAAA,MAAcd,EACrBe,OAAOC,EAAAA,EAAAA,IAAcV,EAAQS,OAASZ,GAEtCG,EAAQW,UACRZ,EAASY,WAAYC,EAAAA,EAAAA,IAAgBZ,EAAQW,gBAE5C,GAAIX,EAAQa,OAAOV,QAAUH,EAAQc,UAAUX,OAAQ,CACxD,MAAMY,GAAYP,EAAAA,EAAAA,OAAeQ,EAAAA,GAAa,SAAW,YACzDjB,EAASG,KAAKe,MAAQ,CAClBC,KAAMH,EACNI,OAAOT,EAAAA,EAAAA,IAA4B,WAAdK,EAAyBf,EAAQa,OAAOM,MAAQnB,EAAQc,UAAUK,OAE/F,MACSnB,EAAQa,OAAOV,OACpBJ,EAASG,KAAKe,MAAQ,CAClBC,KAAM,SACNC,OAAOT,EAAAA,EAAAA,IAAcV,EAAQa,OAAOM,QAGnCnB,EAAQc,UAAUX,SACvBJ,EAASG,KAAKe,MAAQ,CAClBC,KAAM,YACNC,OAAOT,EAAAA,EAAAA,IAAcV,EAAQc,UAAUK,cAnC3CpB,EAASG,KAAO,CACZC,QAAQ,EACRC,YAAY,EACZE,UAAU,EACVC,MAAO,EACPE,MAAO,EAiCnB,CACO,SAASW,EAAWrB,EAAUsB,GACjC,MAAMnB,EAAOH,EAASE,QAAQC,KAAMoB,EAAOvB,EAASG,KACpD,IAAKoB,GAAa,OAAJpB,QAAI,IAAJA,IAAAA,EAAMC,OAChB,OAEJ,MAAMM,EAAQa,EAAKb,MAAQY,EAAME,OAAQC,EAAM9B,EAC/C4B,EAAKf,OAASE,EACVa,EAAKf,MAAQiB,IACbF,EAAKf,OAASiB,EAEtB,C","sources":["../node_modules/@tsparticles/updater-roll/browser/Utils.js"],"sourcesContent":["import { getRandom, getRangeValue, halfRandom, rangeColorToHsl } from \"@tsparticles/engine\";\nconst double = 2, doublePI = Math.PI * double, maxAngle = 360;\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * doublePI,\n        speed: getRangeValue(rollOpt.speed) / maxAngle,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= halfRandom ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = doublePI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n"],"names":["doublePI","Math","PI","maxAngle","initParticle","particle","rollOpt","options","roll","enable","horizontal","mode","vertical","angle","getRandom","speed","getRangeValue","backColor","rangeColorToHsl","darken","enlighten","alterType","halfRandom","alter","type","value","updateRoll","delta","data","factor","max"],"sourceRoot":""}