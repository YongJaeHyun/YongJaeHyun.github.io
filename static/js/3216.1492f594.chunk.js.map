{"version":3,"file":"static/js/3216.1492f594.chunk.js","mappings":"iJACO,SAASA,EAAcC,EAASC,EAAQC,EAAaC,GAA6C,IAA7BC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGG,EAASH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClG,MAAMI,EAAO,GAAIC,EAAO,GAAIC,EAAa,GAAIC,EAAa,GAAIC,EAAS,GAAIC,EAAoB,OAAPd,QAAO,IAAPA,EAAAA,EAAWe,EAAAA,GACnG,IAAIC,EAAgB,EAChBd,EAAc,IACdA,EAAc,GAClB,IAAK,IAAIe,EAAK,EAAGA,GAAMf,IAAee,EAClCR,EAAKQ,GAAMH,IACXJ,EAAKO,GAAMH,IACXH,EAAWM,GAAa,IAAPA,EAAW,EAAIN,EAAWM,EAAK,GAAKd,EACrDa,GAAiBL,EAAWM,GAC5BL,EAAWK,GAAMA,EAAKhB,EACtBY,EAAOI,GAAMH,IAGjB,OADAH,EAAWO,SAAQ,CAACC,EAAOF,IAAQN,EAAWM,GAAOE,EAAQH,GAAkBR,EAAYJ,KACpF,KACH,IAAIgB,EAAIC,EAAKC,EAAS,EACtB,IAAK,IAAIL,EAAKf,EAAae,GAAM,IAAKA,EAClCG,EAAKP,EAAOI,IAAOL,EAAWK,GAC1BJ,EAAOI,IAAO,IACdG,EAAKP,EAAOI,IAAO,EACnBR,EAAKQ,GAAMP,EAAKO,GAChBP,EAAKO,GAAMH,KAEfO,EAAMD,GAAM,GAAK,EAAI,EAAIA,GACzBE,IAAWb,EAAKQ,IAAO,EAAII,GAAOX,EAAKO,GAAMI,GAAOV,EAAWM,GAEnE,OAAOK,EAASlB,CAAQ,CAEhC,C","sources":["../node_modules/@tsparticles/path-curves/browser/Curves.js"],"sourcesContent":["import { getRandom } from \"@tsparticles/engine\";\nexport function CurvesPathGen(rndFunc, period, nbHarmonics, attenHarmonics, lowValue = 0, highValue = 1) {\n    const arP0 = [], arP1 = [], amplitudes = [], increments = [], phases = [], randomFunc = rndFunc ?? getRandom;\n    let globAmplitude = 0;\n    if (nbHarmonics < 1)\n        nbHarmonics = 1;\n    for (let kh = 1; kh <= nbHarmonics; ++kh) {\n        arP0[kh] = randomFunc();\n        arP1[kh] = randomFunc();\n        amplitudes[kh] = kh === 1 ? 1 : amplitudes[kh - 1] * attenHarmonics;\n        globAmplitude += amplitudes[kh];\n        increments[kh] = kh / period;\n        phases[kh] = randomFunc();\n    }\n    amplitudes.forEach((value, kh) => (amplitudes[kh] = (value / globAmplitude) * (highValue - lowValue)));\n    return () => {\n        let pf, pfl, signal = 0;\n        for (let kh = nbHarmonics; kh >= 1; --kh) {\n            pf = phases[kh] += increments[kh];\n            if (phases[kh] >= 1) {\n                pf = phases[kh] -= 1;\n                arP0[kh] = arP1[kh];\n                arP1[kh] = randomFunc();\n            }\n            pfl = pf ** 2 * (3 - 2 * pf);\n            signal += (arP0[kh] * (1 - pfl) + arP1[kh] * pfl) * amplitudes[kh];\n        }\n        return signal + lowValue;\n    };\n}\n"],"names":["CurvesPathGen","rndFunc","period","nbHarmonics","attenHarmonics","lowValue","arguments","length","undefined","highValue","arP0","arP1","amplitudes","increments","phases","randomFunc","getRandom","globAmplitude","kh","forEach","value","pf","pfl","signal"],"sourceRoot":""}