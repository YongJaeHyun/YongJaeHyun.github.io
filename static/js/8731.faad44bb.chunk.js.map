{"version":3,"file":"static/js/8731.faad44bb.chunk.js","mappings":"wJACO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,YAAc,KACfD,KAAKE,SAAW,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,GAAK,IAAMH,KAAKI,QAAQC,MAAO,CACpD,MAAMC,EAAQN,KAAKI,QAAQE,MAAQH,EACnCH,KAAKE,SAASK,KAAKC,EAAAA,GAAOC,OAAOC,KAAKC,IAAKL,EAAQI,KAAKE,GAAM,KAAMF,KAAKG,IAAKP,EAAQI,KAAKE,GAAM,MACrG,GAEJZ,KAAKE,SAAW,GAChBF,KAAKI,QAAU,CACXC,MAAO,EACPS,UAAW,GACXR,MAAO,GAEf,CACAS,QAAAA,CAASC,GACL,MAAM,MAAEX,GAAUL,KAAKI,aACLa,IAAdD,EAAEE,UACFF,EAAEE,QAAU,QAEOD,IAAnBD,EAAEG,eACFH,EAAEG,aAAyB,IAAVd,EAAwC,GAAV,GAAde,EAAAA,EAAAA,MAAmB,IAAUA,EAAAA,EAAAA,MAAcf,EAAS,QAEtEY,IAAfD,EAAEK,WACFL,EAAEK,SAAWL,EAAEM,SAASC,QAExBP,EAAEE,QAAUlB,KAAKI,QAAQU,YAAc,IACvCE,EAAEG,cAAeC,EAAAA,EAAAA,MAAc,IAAOJ,EAAEG,aAAe,GAAKd,GAASW,EAAEG,aAAed,EAAQ,GAAKA,GAEvGW,EAAEM,SAASE,EAAI,EACfR,EAAEM,SAASG,EAAI,EACfT,EAAEE,UACF,MAAMQ,EAAY1B,KAAKE,SAASc,EAAEG,cAClC,OAAOQ,QAAQC,QAAQpB,EAAAA,GAAOC,OAAOiB,EAAUF,EAAIR,EAAEK,SAAUK,EAAUD,EAAIT,EAAEK,UACnF,CACA,UAAMQ,CAAKC,GAAW,IAAAC,EAClB,MAAM3B,EAAU0B,EAAUE,cAAcC,UAAUC,KAAKC,KAAK/B,QAC5DJ,KAAKI,QAAQC,MAAQD,EAAQC,MAAQ,EAAID,EAAQC,MAAQ,EACzDL,KAAKI,QAAQE,MAAqB,QAAhByB,EAAG3B,EAAQE,aAAK,IAAAyB,EAAAA,EAAI,GACtC/B,KAAKI,QAAQU,UAAYV,EAAQU,WAAa,EAAIV,EAAQU,UAAY,GACtEd,KAAKC,oBACC0B,QAAQC,SAClB,CACAQ,KAAAA,CAAMC,UACKA,EAASnB,eACTmB,EAASlB,oBACTkB,EAAShB,QACpB,CACAiB,MAAAA,GACA,E","sources":["../node_modules/@tsparticles/path-polygon/browser/PolygonPathGenerator.js"],"sourcesContent":["import { Vector, getRandom } from \"@tsparticles/engine\";\nexport class PolygonPathGenerator {\n    constructor() {\n        this._createDirs = () => {\n            this.dirsList = [];\n            for (let i = 0; i < 360; i += 360 / this.options.sides) {\n                const angle = this.options.angle + i;\n                this.dirsList.push(Vector.create(Math.cos((angle * Math.PI) / 180), Math.sin((angle * Math.PI) / 180)));\n            }\n        };\n        this.dirsList = [];\n        this.options = {\n            sides: 6,\n            turnSteps: 20,\n            angle: 30,\n        };\n    }\n    generate(p) {\n        const { sides } = this.options;\n        if (p.hexStep === undefined) {\n            p.hexStep = 0;\n        }\n        if (p.hexDirection === undefined) {\n            p.hexDirection = sides === 6 ? ((getRandom() * 3) | 0) * 2 : (getRandom() * sides) | 0;\n        }\n        if (p.hexSpeed === undefined) {\n            p.hexSpeed = p.velocity.length;\n        }\n        if (p.hexStep % this.options.turnSteps === 0) {\n            p.hexDirection = getRandom() > 0.5 ? (p.hexDirection + 1) % sides : (p.hexDirection + sides - 1) % sides;\n        }\n        p.velocity.x = 0;\n        p.velocity.y = 0;\n        p.hexStep++;\n        const direction = this.dirsList[p.hexDirection];\n        return Promise.resolve(Vector.create(direction.x * p.hexSpeed, direction.y * p.hexSpeed));\n    }\n    async init(container) {\n        const options = container.actualOptions.particles.move.path.options;\n        this.options.sides = options.sides > 0 ? options.sides : 6;\n        this.options.angle = options.angle ?? 30;\n        this.options.turnSteps = options.turnSteps >= 0 ? options.turnSteps : 20;\n        this._createDirs();\n        await Promise.resolve();\n    }\n    reset(particle) {\n        delete particle.hexStep;\n        delete particle.hexDirection;\n        delete particle.hexSpeed;\n    }\n    update() {\n    }\n}\n"],"names":["PolygonPathGenerator","constructor","this","_createDirs","dirsList","i","options","sides","angle","push","Vector","create","Math","cos","PI","sin","turnSteps","generate","p","undefined","hexStep","hexDirection","getRandom","hexSpeed","velocity","length","x","y","direction","Promise","resolve","init","container","_options$angle","actualOptions","particles","move","path","reset","particle","update"],"sourceRoot":""}