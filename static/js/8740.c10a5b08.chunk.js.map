{"version":3,"file":"static/js/8740.c10a5b08.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-polygon-mask/browser/utils.js"],"sourcesContent":["import { Vector, getDistances, getStyleFromRgb, rangeColorToRgb } from \"@tsparticles/engine\";\nconst squareExp = 2, inSegmentRange = {\n    min: 0,\n    max: 1,\n}, double = 2;\nexport function drawPolygonMask(context, rawData, stroke) {\n    const color = rangeColorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    const firstIndex = 0, firstItem = rawData[firstIndex];\n    context.beginPath();\n    context.moveTo(firstItem.x, firstItem.y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nexport function drawPolygonMaskPath(context, path, stroke, position) {\n    const defaultTransform = {\n        a: 1,\n        b: 0,\n        c: 0,\n        d: 1,\n    };\n    context.setTransform(defaultTransform.a, defaultTransform.b, defaultTransform.c, defaultTransform.d, position.x, position.y);\n    const color = rangeColorToRgb(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n    context.resetTransform();\n}\nexport function parsePaths(paths, scale, offset) {\n    const res = [], defaultCount = 0;\n    for (const path of paths) {\n        const segments = path.element.pathSegList, len = segments?.numberOfItems ?? defaultCount, p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments?.getItem(i), svgPathSeg = window.SVGPathSeg;\n            switch (segment?.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nexport function calcClosestPointOnSegment(s1, s2, pos) {\n    const { dx: dx1, dy: dy1 } = getDistances(pos, s1), { dx: dx2, dy: dy2 } = getDistances(s2, s1), t = (dx1 * dx2 + dy1 * dy2) / (dx2 ** squareExp + dy2 ** squareExp), res = {\n        x: s1.x + dx2 * t,\n        y: s1.y + dy2 * t,\n        isOnSegment: t >= inSegmentRange.min && t <= inSegmentRange.max,\n    };\n    if (t < inSegmentRange.min) {\n        res.x = s1.x;\n        res.y = s1.y;\n    }\n    else if (t > inSegmentRange.max) {\n        res.x = s2.x;\n        res.y = s2.y;\n    }\n    return res;\n}\nexport function segmentBounce(start, stop, velocity) {\n    const { dx, dy } = getDistances(start, stop), wallAngle = Math.atan2(dy, dx), wallNormal = Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)), d = double * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);\n    wallNormal.multTo(d);\n    velocity.subFrom(wallNormal);\n}\n"],"names":["squareExp","inSegmentRange","min","max","double","drawPolygonMask","context","rawData","stroke","color","rangeColorToRgb","firstItem","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","defaultTransform","setTransform","opacity","resetTransform","parsePaths","paths","scale","offset","res","_segments$numberOfIte","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","calcClosestPointOnSegment","s1","s2","pos","dx","dx1","dy","dy1","getDistances","dx2","dy2","t","isOnSegment","segmentBounce","start","stop","velocity","wallAngle","Math","atan2","wallNormal","Vector","create","sin","cos","d","multTo","subFrom"],"sourceRoot":""}