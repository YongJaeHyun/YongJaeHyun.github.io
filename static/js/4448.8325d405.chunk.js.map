{"version":3,"file":"static/js/4448.8325d405.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-sounds/browser/SoundsInstance.js"],"sourcesContent":["import { clamp, executeOnSingleOrMultiple, getLogger, isArray, isNumber, itemFromArray, itemFromSingleOrMultiple, mouseDownEvent, percentDenominator, touchStartEvent, } from \"@tsparticles/engine\";\nimport { getNoteFrequency, isWindowMuted, unmuteWindow } from \"./utils.js\";\nconst zIndexOffset = 1, rightOffset = 1, minVolume = 0;\nfunction initImage(data) {\n    const img = document.createElement(\"img\"), { clickCb, container, display, iconOptions, margin, options, pos, rightOffsets } = data, { width, path, style, svg } = iconOptions, defaultAccumulator = 0;\n    setIconStyle(img, pos.top + margin, pos.right -\n        (margin * (rightOffsets.length + rightOffset) +\n            width +\n            rightOffsets.reduce((a, b) => a + b, defaultAccumulator)), display, options.fullScreen.zIndex + zIndexOffset, width, margin, style);\n    img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : \"\");\n    const parent = container.canvas.element?.parentNode ?? document.body;\n    parent.append(img);\n    img.addEventListener(\"click\", () => {\n        void clickCb();\n    });\n    return img;\n}\nfunction removeImage(image) {\n    if (!image) {\n        return;\n    }\n    image.remove();\n}\nfunction setIconStyle(icon, top, left, display, zIndex, width, margin, style) {\n    icon.style.userSelect = \"none\";\n    icon.style.webkitUserSelect = \"none\";\n    icon.style.position = \"absolute\";\n    icon.style.top = `${top + margin}px`;\n    icon.style.left = `${left - margin - width}px`;\n    icon.style.display = display;\n    icon.style.zIndex = `${zIndex + zIndexOffset}`;\n    icon.style.cssText += style;\n}\nexport class SoundsInstance {\n    constructor(container, engine) {\n        this._addBuffer = (audioCtx) => {\n            const buffer = audioCtx.createBufferSource();\n            this._audioSources.push(buffer);\n            return buffer;\n        };\n        this._addOscillator = (audioCtx) => {\n            const oscillator = audioCtx.createOscillator();\n            this._audioSources.push(oscillator);\n            return oscillator;\n        };\n        this._initEvents = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable || !container.canvas.element) {\n                return;\n            }\n            for (const event of soundsOptions.events) {\n                const cb = (args) => {\n                    void (async () => {\n                        const filterNotValid = event.filter && !event.filter(args);\n                        if (this._container !== args.container) {\n                            return;\n                        }\n                        if (!this._container || !!this._container.muted || this._container.destroyed) {\n                            executeOnSingleOrMultiple(event.event, (item) => {\n                                this._engine.removeEventListener(item, cb);\n                            });\n                            return;\n                        }\n                        if (filterNotValid) {\n                            return;\n                        }\n                        const defaultNoteIndex = 0;\n                        if (event.audio) {\n                            this._playBuffer(itemFromSingleOrMultiple(event.audio));\n                        }\n                        else if (event.melodies) {\n                            const melody = itemFromArray(event.melodies);\n                            if (melody.melodies.length) {\n                                await Promise.allSettled(melody.melodies.map((m) => this._playNote(m.notes, defaultNoteIndex, melody.loop)));\n                            }\n                            else {\n                                await this._playNote(melody.notes, defaultNoteIndex, melody.loop);\n                            }\n                        }\n                        else if (event.notes) {\n                            const note = itemFromArray(event.notes);\n                            await this._playNote([note], defaultNoteIndex, false);\n                        }\n                    })();\n                };\n                executeOnSingleOrMultiple(event.event, (item) => {\n                    this._engine.addEventListener(item, cb);\n                });\n            }\n        };\n        this._mute = async () => {\n            const container = this._container, audioContext = this._getAudioContext();\n            for (const source of this._audioSources) {\n                this._removeAudioSource(source);\n            }\n            if (this._gain) {\n                this._gain.disconnect();\n            }\n            await audioContext.close();\n            container.audioContext = undefined;\n            this._engine.dispatchEvent(\"soundsMuted\", { container: this._container });\n        };\n        this._playBuffer = (audio) => {\n            const audioBuffer = this._audioMap.get(audio.source);\n            if (!audioBuffer) {\n                return;\n            }\n            const audioCtx = this._container.audioContext;\n            if (!audioCtx) {\n                return;\n            }\n            const source = this._addBuffer(audioCtx);\n            source.loop = audio.loop;\n            source.buffer = audioBuffer;\n            source.connect(this._gain ?? audioCtx.destination);\n            source.start();\n        };\n        this._playFrequency = async (frequency, duration) => {\n            if (!this._gain || this._container.muted) {\n                return;\n            }\n            const audioContext = this._getAudioContext(), oscillator = this._addOscillator(audioContext);\n            oscillator.connect(this._gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = frequency;\n            oscillator.start();\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    this._removeAudioSource(oscillator);\n                    resolve();\n                }, duration);\n            });\n        };\n        this._playMuteSound = () => {\n            if (this._container.muted) {\n                return;\n            }\n            const audioContext = this._getAudioContext(), gain = audioContext.createGain();\n            gain.connect(audioContext.destination);\n            gain.gain.value = 0;\n            const oscillator = audioContext.createOscillator();\n            oscillator.connect(gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = 1;\n            oscillator.start();\n            setTimeout(() => {\n                oscillator.stop();\n                oscillator.disconnect();\n                gain.disconnect();\n            });\n        };\n        this._playNote = async (notes, noteIdx, loop) => {\n            if (this._container.muted) {\n                return;\n            }\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = note.value;\n            const promises = executeOnSingleOrMultiple(value, async (_, idx) => {\n                return this._playNoteValue(notes, noteIdx, idx);\n            });\n            await (isArray(promises) ? Promise.allSettled(promises) : promises);\n            const indexOffset = 1;\n            let nextNoteIdx = noteIdx + indexOffset;\n            if (loop && nextNoteIdx >= notes.length) {\n                nextNoteIdx = nextNoteIdx % notes.length;\n            }\n            if (this._container.muted) {\n                return;\n            }\n            await this._playNote(notes, nextNoteIdx, loop);\n        };\n        this._playNoteValue = async (notes, noteIdx, valueIdx) => {\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = itemFromSingleOrMultiple(note.value, valueIdx, true);\n            try {\n                const freq = getNoteFrequency(value);\n                if (!isNumber(freq)) {\n                    return;\n                }\n                await this._playFrequency(freq, note.duration);\n            }\n            catch (e) {\n                getLogger().error(e);\n            }\n        };\n        this._removeAudioSource = (source) => {\n            source.stop();\n            source.disconnect();\n            const deleteCount = 1;\n            this._audioSources.splice(this._audioSources.indexOf(source), deleteCount);\n        };\n        this._unmute = () => {\n            const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n            if (!soundsOptions) {\n                return;\n            }\n            const audioContext = this._getAudioContext();\n            if (!this._audioSources) {\n                this._audioSources = [];\n            }\n            const gain = audioContext.createGain();\n            gain.connect(audioContext.destination);\n            gain.gain.value = soundsOptions.volume.value / percentDenominator;\n            this._gain = gain;\n            this._initEvents();\n            this._engine.dispatchEvent(\"soundsUnmuted\", { container: this._container });\n        };\n        this._updateMuteIcons = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable || !soundsOptions.icons.enable) {\n                return;\n            }\n            const muteImg = this._muteImg, unmuteImg = this._unmuteImg;\n            if (muteImg) {\n                muteImg.style.display = container.muted ? \"block\" : \"none\";\n            }\n            if (unmuteImg) {\n                unmuteImg.style.display = container.muted ? \"none\" : \"block\";\n            }\n        };\n        this._updateMuteStatus = async () => {\n            const container = this._container, audioContext = this._getAudioContext();\n            if (container.muted) {\n                await audioContext?.suspend();\n                await this._mute();\n            }\n            else {\n                await audioContext?.resume();\n                this._unmute();\n                this._playMuteSound();\n            }\n        };\n        this._updateVolume = async () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable) {\n                return;\n            }\n            clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);\n            let stateChanged = false;\n            if (this._volume <= minVolume && !container.muted) {\n                this._volume = 0;\n                container.muted = true;\n                stateChanged = true;\n            }\n            else if (this._volume > minVolume && container.muted) {\n                container.muted = false;\n                stateChanged = true;\n            }\n            if (stateChanged) {\n                this._updateMuteIcons();\n                await this._updateMuteStatus();\n            }\n            if (this._gain?.gain) {\n                this._gain.gain.value = this._volume / percentDenominator;\n            }\n        };\n        this._container = container;\n        this._engine = engine;\n        this._volume = 0;\n        this._audioSources = [];\n        this._audioMap = new Map();\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable) {\n            return;\n        }\n        if (soundsOptions.autoPlay && isWindowMuted()) {\n            const firstClickHandler = () => {\n                removeEventListener(mouseDownEvent, firstClickHandler);\n                removeEventListener(touchStartEvent, firstClickHandler);\n                unmuteWindow();\n                void this.unmute();\n            };\n            const listenerOptions = {\n                capture: true,\n                once: true,\n            };\n            addEventListener(mouseDownEvent, firstClickHandler, listenerOptions);\n            addEventListener(touchStartEvent, firstClickHandler, listenerOptions);\n        }\n        this._volume = soundsOptions.volume.value;\n        const events = soundsOptions.events;\n        this._audioMap = new Map();\n        for (const event of events) {\n            if (!event.audio) {\n                continue;\n            }\n            const promises = executeOnSingleOrMultiple(event.audio, async (audio) => {\n                const response = await fetch(audio.source);\n                if (!response.ok) {\n                    return;\n                }\n                const arrayBuffer = await response.arrayBuffer(), audioContext = this._getAudioContext(), audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n                this._audioMap.set(audio.source, audioBuffer);\n            });\n            if (promises instanceof Promise) {\n                await promises;\n            }\n            else {\n                await Promise.allSettled(promises);\n            }\n        }\n    }\n    async mute() {\n        if (!this._container.muted) {\n            await this.toggleMute();\n        }\n    }\n    async start() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable || !container.canvas.element) {\n            return;\n        }\n        container.muted = true;\n        const canvas = container.canvas.element, pos = {\n            top: canvas.offsetTop,\n            right: canvas.offsetLeft + canvas.offsetWidth,\n        }, { mute, unmute, volumeDown, volumeUp } = soundsOptions.icons, margin = 10, toggleMute = async () => {\n            await this.toggleMute();\n        }, enableIcons = soundsOptions.icons.enable, display = enableIcons ? \"block\" : \"none\";\n        this._muteImg = initImage({\n            container,\n            options,\n            pos,\n            display,\n            iconOptions: mute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._unmuteImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"none\",\n            iconOptions: unmute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._volumeDownImg = initImage({\n            container,\n            options,\n            pos,\n            display,\n            iconOptions: volumeDown,\n            margin,\n            rightOffsets: [volumeUp.width],\n            clickCb: async () => {\n                await this.volumeDown();\n            },\n        });\n        this._volumeUpImg = initImage({\n            container,\n            options,\n            pos,\n            display,\n            iconOptions: volumeUp,\n            margin,\n            rightOffsets: [],\n            clickCb: async () => {\n                await this.volumeUp();\n            },\n        });\n        if (!isWindowMuted() && soundsOptions.autoPlay) {\n            await this.unmute();\n        }\n    }\n    stop() {\n        this._container.muted = true;\n        void (async () => {\n            await this._mute();\n            removeImage(this._muteImg);\n            removeImage(this._unmuteImg);\n            removeImage(this._volumeDownImg);\n            removeImage(this._volumeUpImg);\n        })();\n    }\n    async toggleMute() {\n        const container = this._container;\n        container.muted = !container.muted;\n        this._updateMuteIcons();\n        await this._updateMuteStatus();\n    }\n    async unmute() {\n        if (this._container.muted) {\n            await this.toggleMute();\n        }\n    }\n    async volumeDown() {\n        const container = this._container, soundsOptions = container.actualOptions.sounds;\n        if (!soundsOptions?.enable) {\n            return;\n        }\n        if (container.muted) {\n            this._volume = 0;\n        }\n        this._volume -= soundsOptions.volume.step;\n        await this._updateVolume();\n    }\n    async volumeUp() {\n        const container = this._container, soundsOptions = container.actualOptions.sounds;\n        if (!soundsOptions?.enable) {\n            return;\n        }\n        this._volume += soundsOptions.volume.step;\n        await this._updateVolume();\n    }\n    _getAudioContext() {\n        const container = this._container;\n        if (!container.audioContext) {\n            container.audioContext = new AudioContext();\n        }\n        return container.audioContext;\n    }\n}\n"],"names":["zIndexOffset","initImage","data","_container$canvas$ele","_container$canvas$ele2","img","document","createElement","clickCb","container","display","iconOptions","margin","options","pos","rightOffsets","width","path","style","svg","icon","top","left","zIndex","userSelect","webkitUserSelect","position","concat","cssText","setIconStyle","right","length","reduce","a","b","fullScreen","src","btoa","canvas","element","parentNode","body","append","addEventListener","removeImage","image","remove","SoundsInstance","constructor","engine","this","_addBuffer","audioCtx","buffer","createBufferSource","_audioSources","push","_addOscillator","oscillator","createOscillator","_initEvents","_container","soundsOptions","actualOptions","sounds","enable","event","events","cb","args","filterNotValid","filter","muted","destroyed","executeOnSingleOrMultiple","item","_engine","removeEventListener","audio","_playBuffer","itemFromSingleOrMultiple","melodies","melody","itemFromArray","Promise","allSettled","map","m","_playNote","notes","loop","note","_mute","async","audioContext","_getAudioContext","source","_removeAudioSource","_gain","disconnect","close","undefined","dispatchEvent","_this$_gain","audioBuffer","_audioMap","get","connect","destination","start","_playFrequency","frequency","duration","type","value","resolve","setTimeout","_playMuteSound","gain","createGain","stop","noteIdx","promises","_","idx","_playNoteValue","isArray","nextNoteIdx","valueIdx","freq","getNoteFrequency","isNumber","e","getLogger","error","splice","indexOf","_unmute","volume","percentDenominator","_updateMuteIcons","icons","muteImg","_muteImg","unmuteImg","_unmuteImg","_updateMuteStatus","suspend","resume","_updateVolume","_this$_gain2","clamp","_volume","min","max","stateChanged","Map","init","autoPlay","isWindowMuted","firstClickHandler","mouseDownEvent","touchStartEvent","unmuteWindow","unmute","listenerOptions","capture","once","response","fetch","ok","arrayBuffer","decodeAudioData","set","mute","toggleMute","offsetTop","offsetLeft","offsetWidth","volumeDown","volumeUp","_volumeDownImg","_volumeUpImg","step","AudioContext"],"sourceRoot":""}